/*
 * Copyright 2014-2021 Thingsquare AB.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
* BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
* ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
*/

/**
 * Parts of this code (the HTML5 ajax code) is from Framework7 and is
 * licensed under the following license:
 *
 * Framework7 1.6.0
 * Full featured mobile HTML framework for building iOS & Android apps
 *
 * http://framework7.io/
 *
 * Copyright 2017, Vladimir Kharlampidi
 * The iDangero.us
 * http://www.idangero.us/
 *
 * Licensed under MIT
 *
 * Released on: April 10, 2017
 */

/*jslint nomen: true, node: true */

'use strict';
var thsq;
var checkLoaded, fcmMessage, fcmToken, hostMessage, udpCallback, bleCallback, bleEnabled;

(function () {

    var nodejs = false;
    var browser = false;

    if (typeof require !== 'undefined') {
        var request = require('request');
        var jar = request.jar();
        var WebSocketClient = require('websocket').client;
        var crypto = require('crypto');
        var npm_pkg_version = require('../package.json').version;
        nodejs = true;
    } else {
        browser = true;
    }

    /*jslint nomen: true, browser: true */
    /*global AndroidUDPSender, AndroidUDPListener, AndroidBLEListener,AndroidFCMService, XMLHttpRequest */

    function each(obj, callback) {
            // Check it's iterable
            // TODO: Should probably raise a value error here
            if (typeof obj !== 'object') return;
            // Don't bother continuing without a callback
            if (!callback) return;
            if (Array.isArray(obj)) {
                var i;
                // Array
                for (i = 0; i < obj.length; i++) {
                    // If callback returns false
                    if (callback(i, obj[i]) === false) {
                        // Break out of the loop
                        return;
                    }
                }
            }
            else {
                var prop;
                // Object
                for (prop in obj) {
                    // Check the propertie belongs to the object
                    // not it's prototype
                    if (obj.hasOwnProperty(prop)) {
                        // If the callback returns false
                        if (callback(prop, obj[prop]) === false) {
                            // Break out of the loop;
                            return;
                        }
                    }
                }
            }
    }
    function serializeObject(obj, parents) {
            if (typeof obj === 'string') return obj;
            var resultArray = [];
            var separator = '&';
            parents = parents || [];
            var newParents;
            function var_name(name) {
                if (parents.length > 0) {
                    var _parents = '';
                    for (var j = 0; j < parents.length; j++) {
                        if (j === 0) _parents += parents[j];
                        else _parents += '[' + encodeURIComponent(parents[j]) + ']';
                    }
                    return _parents + '[' + encodeURIComponent(name) + ']';
                }
                else {
                    return encodeURIComponent(name);
                }
            }
            function var_value(value) {
                return encodeURIComponent(value);
            }
            for (var prop in obj) {
                if (obj.hasOwnProperty(prop)) {
                    var toPush;
                    if (Array.isArray(obj[prop])) {
                        toPush = [];
                        for (var i = 0; i < obj[prop].length; i ++) {
                            if (!Array.isArray(obj[prop][i]) && typeof obj[prop][i] === 'object') {
                                newParents = parents.slice();
                                newParents.push(prop);
                                newParents.push(i + '');
                                toPush.push(serializeObject(obj[prop][i], newParents));
                            }
                            else {
                                toPush.push(var_name(prop) + '[]=' + var_value(obj[prop][i]));
                            }

                        }
                        if (toPush.length > 0) resultArray.push(toPush.join(separator));
                    }
                    else if (obj[prop] === null) {
                        resultArray.push(var_name(prop) + '=');
                    }
                    else if (typeof obj[prop] === 'object') {
                        // Object, convert to named array
                        newParents = parents.slice();
                        newParents.push(prop);
                        toPush = serializeObject(obj[prop], newParents);
                        if (toPush !== '') resultArray.push(toPush);
                    }
                    else if (typeof obj[prop] !== 'undefined' && obj[prop] !== '') {
                        // Should be string or plain value
                        resultArray.push(var_name(prop) + '=' + var_value(obj[prop]));
                    }
                    else if (obj[prop] === '') resultArray.push(var_name(prop));
                }
            }
            return resultArray.join(separator);
        }
                var globalAjaxOptions = {};

    function ajaxNode(options) {
        var reqoptions, qs, form;

        if (options.method === 'GET') {
            qs = options.data;
        } else {
            form = options.data;
        }

        reqoptions = {
            method: options.method,
            url: options.url,
            qs: qs,
            form: form,
            timeout: options.timeout,
            jar: jar,
            headers: {
                'User-Agent': 'thsq.js-' + npm_pkg_version
            }
        };
        request(reqoptions, function (error, response, body) {
            if (error || response.statusCode > 300) {
                if (typeof options.error === 'function') {
                    options.error(body, response);
                }
            } else {
                if (typeof options.success === 'function') {
                    options.success(body, response);
                }
            }
            if (typeof options.complete === 'function') {
                options.complete(body, response);
            }
        });
    }

    function ajaxWeb(options) {
            var defaults = {
                method: 'GET',
                data: false,
                async: true,
                cache: true,
                user: '',
                password: '',
                headers: {},
                xhrFields: {},
                statusCode: {},
                processData: true,
                dataType: 'text',
                contentType: 'application/x-www-form-urlencoded',
                timeout: 0
            };
            var callbacks = ['beforeSend', 'error', 'complete', 'success', 'statusCode'];


            //For jQuery guys
            if (options.type) options.method = options.type;

            // Merge global and defaults
            each(globalAjaxOptions, function (globalOptionName, globalOptionValue) {
                if (callbacks.indexOf(globalOptionName) < 0) defaults[globalOptionName] = globalOptionValue;
            });

            // Function to run XHR callbacks and events
            function fireAjaxCallback (eventName, eventData, callbackName) {
                var a = arguments;
                //if (eventName) $(document).trigger(eventName, eventData);
                if (callbackName) {
                    // Global callback
                    if (callbackName in globalAjaxOptions) globalAjaxOptions[callbackName](a[3], a[4], a[5], a[6]);
                    // Options callback
                    if (options[callbackName]) options[callbackName](a[3], a[4], a[5], a[6]);
                }
            }

            // Merge options and defaults
            each(defaults, function (prop, defaultValue) {
                if (!(prop in options)) options[prop] = defaultValue;
            });

            // Default URL
            if (!options.url) {
                options.url = window.location.toString();
            }
            // Parameters Prefix
            var paramsPrefix = options.url.indexOf('?') >= 0 ? '&' : '?';

            // UC method
            var _method = options.method.toUpperCase();
            // Data to modify GET URL
            if ((_method === 'GET' || _method === 'HEAD' || _method === 'OPTIONS' || _method === 'DELETE') && options.data) {
                var stringData;
                if (typeof options.data === 'string') {
                    // Should be key=value string
                    if (options.data.indexOf('?') >= 0) stringData = options.data.split('?')[1];
                    else stringData = options.data;
                }
                else {
                    // Should be key=value object
                    stringData = serializeObject(options.data);
                }
                if (stringData.length) {
                    options.url += paramsPrefix + stringData;
                    if (paramsPrefix === '?') paramsPrefix = '&';
                }
            }

            // Cache for GET/HEAD requests
            if (_method === 'GET' || _method === 'HEAD' || _method === 'OPTIONS' || _method === 'DELETE') {
                if (options.cache === false) {
                    options.url += (paramsPrefix + '_nocache=' + Date.now());
                }
            }

            // Create XHR
            var xhr = new XMLHttpRequest();

            // Save Request URL
            xhr.requestUrl = options.url;
            xhr.requestParameters = options;

            // Open XHR
            xhr.open(_method, options.url, options.async, options.user, options.password);

            // Create POST Data
            var postData = null;

            if ((_method === 'POST' || _method === 'PUT' || _method === 'PATCH') && options.data) {
                if (options.processData) {
                    var postDataInstances = [ArrayBuffer, Blob, Document, FormData];
                    // Post Data
                    if (postDataInstances.indexOf(options.data.constructor) >= 0) {
                        postData = options.data;
                    }
                    else {
                        // POST Headers
                        var boundary = '---------------------------' + Date.now().toString(16);

                        if (options.contentType === 'multipart\/form-data') {
                            xhr.setRequestHeader('Content-Type', 'multipart\/form-data; boundary=' + boundary);
                        }
                        else {
                            xhr.setRequestHeader('Content-Type', options.contentType);
                        }
                        postData = '';
                        var _data = serializeObject(options.data);
                        if (options.contentType === 'multipart\/form-data') {
                            boundary = '---------------------------' + Date.now().toString(16);
                            _data = _data.split('&');
                            var _newData = [];
                            for (var i = 0; i < _data.length; i++) {
                                _newData.push('Content-Disposition: form-data; name="' + _data[i].split('=')[0] + '"\r\n\r\n' + _data[i].split('=')[1] + '\r\n');
                            }
                            postData = '--' + boundary + '\r\n' + _newData.join('--' + boundary + '\r\n') + '--' + boundary + '--\r\n';
                        }
                        else {
                            postData = _data;
                        }
                    }
                }
                else {
                    postData = options.data;
                }

            }

            // Additional headers
            if (options.headers) {
                each(options.headers, function (headerName, headerCallback) {
                    xhr.setRequestHeader(headerName, headerCallback);
                });
            }

            // Check for crossDomain
            if (typeof options.crossDomain === 'undefined') {
                options.crossDomain = /^([\w-]+:)?\/\/([^\/]+)/.test(options.url) && RegExp.$2 !== window.location.host;
            }

            if (!options.crossDomain) {
                xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            }

            if (options.xhrFields) {
                each(options.xhrFields, function (fieldName, fieldValue) {
                    xhr[fieldName] = fieldValue;
                });
            }

            var xhrTimeout;
            // Handle XHR
            xhr.onload = function (e) {
                if (xhrTimeout) clearTimeout(xhrTimeout);
                if ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 0) {
                    var responseData;
                    if (options.dataType === 'json') {
                        try {
                            responseData = JSON.parse(xhr.responseText);
                            fireAjaxCallback('ajaxSuccess ajax:success', {xhr: xhr}, 'success', responseData, xhr.status, xhr);
                        }
                        catch (err) {
                            fireAjaxCallback('ajaxError ajax:error', {xhr: xhr, parseerror: true}, 'error', xhr, 'parseerror');
                        }
                    }
                    else {
                        responseData = xhr.responseType === 'text' || xhr.responseType === '' ? xhr.responseText : xhr.response;
                        fireAjaxCallback('ajaxSuccess ajax:success', {xhr: xhr}, 'success', responseData, xhr.status, xhr);
                    }
                }
                else {
                    fireAjaxCallback('ajaxError ajax:error', {xhr: xhr}, 'error', xhr, xhr.status);
                }
                if (options.statusCode) {
                    if (globalAjaxOptions.statusCode && globalAjaxOptions.statusCode[xhr.status]) globalAjaxOptions.statusCode[xhr.status](xhr);
                    if (options.statusCode[xhr.status]) options.statusCode[xhr.status](xhr);
                }
                fireAjaxCallback('ajaxComplete ajax:complete', {xhr: xhr}, 'complete', xhr, xhr.status);
            };

            xhr.onerror = function (e) {
                if (xhrTimeout) clearTimeout(xhrTimeout);
                fireAjaxCallback('ajaxError ajax:error', {xhr: xhr}, 'error', xhr, xhr.status);
                fireAjaxCallback('ajaxComplete ajax:complete', {xhr: xhr, error: true}, 'complete', xhr, 'error');
            };

            // Ajax start callback
            fireAjaxCallback('ajaxStart ajax:start', {xhr: xhr}, 'start', xhr);
            fireAjaxCallback(undefined, undefined, 'beforeSend', xhr);

            // Timeout
            if (options.timeout > 0) {
                xhr.onabort = function () {
                    if (xhrTimeout) clearTimeout(xhrTimeout);
                };
                xhrTimeout = setTimeout(function () {
                    xhr.abort();
                    fireAjaxCallback('ajaxError ajax:error', {xhr: xhr, timeout: true}, 'error', xhr, 'timeout');
                    fireAjaxCallback('ajaxComplete ajax:complete', {xhr: xhr, timeout: true}, 'complete', xhr, 'timeout');
                }, options.timeout);
            }

            // Send XHR
            xhr.send(postData);

            // Return XHR object
            return xhr;
        }

    var ajax;

    if (typeof XMLHttpRequest === 'undefined') {
        ajax = ajaxNode;
    } else {
        ajax = ajaxWeb;
    }

    function EventEmitter() {
        this.events = {};
    }

    EventEmitter.prototype.on = function (event, options, listener) {
        if (this.events[event] === undefined) {
            this.events[event] = [];
        }

        if (typeof options === 'function') {
            listener = options;
            options = {};
        }

        this.events[event].push(listener);

        if (event === 'device-variable-history') {
            throw new Error('obsolete device-variable-history event, see thsq.addHistoryListener()');
        }
    };

    EventEmitter.prototype.removeListener = function (event, listener) {
        var index;

        if (this.events[event] !== undefined) {
            index = this.events[event].indexOf(listener);

            if (index > -1) {
                this.events[event].splice(index, 1);
            }
        }
        return this;
    };

    EventEmitter.prototype.off = function (event, listener) {
        return this.removeListener(event, listener);
    };

    EventEmitter.prototype.removeAllListeners = function (event) {
        if (event) {
            delete this.events[event];
        } else {
            this.events = {};
        }
        return this;
    };

    EventEmitter.prototype.listeners = function (event) {
        if (this.events[event] !== undefined) {
            return this.events[event].slice();
        }
    };

    EventEmitter.prototype.emit = function (event) {
        var i, listeners, length, args;

        args = [].slice.call(arguments, 1);

        if (this.events[event] !== undefined) {
            listeners = this.events[event].slice();
            length = listeners.length;

            for (i = 0; i < length; i += 1) {
                listeners[i].apply(this, args);
            }
            return true;
        }
        return false;
    };

    EventEmitter.prototype.once = function (event, listener) {
        this.on(event, function callback() {
            this.removeListener(event, callback);
            listener.apply(this, arguments);
        });
    };

    EventEmitter.prototype.listenerCount = function (event) {
        if (this.events[event] === undefined) {
            return 0;
        }
        return this.events[event].length;
    };

    EventEmitter.prototype.eventNames = function (event) {
        return Object.keys(this.events);
    };
    /*
     * JavaScript MD5
     * https://github.com/blueimp/JavaScript-MD5
     *
     * Copyright 2011, Sebastian Tschan
     * https://blueimp.net
     *
     * Licensed under the MIT license:
     * https://opensource.org/licenses/MIT
     *
     * Based on
     * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
     * Digest Algorithm, as defined in RFC 1321.
     * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     * Distributed under the BSD License
     * See http://pajhome.org.uk/crypt/md5 for more info.
     */

    var md5;
    (function() {

        /**
         * Add integers, wrapping at 2^32.
         * This uses 16-bit operations internally to work around bugs in interpreters.
         *
         * @param {number} x First integer
         * @param {number} y Second integer
         * @returns {number} Sum
         */
        function safeAdd(x, y) {
            var lsw = (x & 0xffff) + (y & 0xffff);
            var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
            return (msw << 16) | (lsw & 0xffff);
        }

        /**
         * Bitwise rotate a 32-bit number to the left.
         *
         * @param {number} num 32-bit number
         * @param {number} cnt Rotation count
         * @returns {number} Rotated number
         */
        function bitRotateLeft(num, cnt) {
            return (num << cnt) | (num >>> (32 - cnt));
        }

        /**
         * Basic operation the algorithm uses.
         *
         * @param {number} q q
         * @param {number} a a
         * @param {number} b b
         * @param {number} x x
         * @param {number} s s
         * @param {number} t t
         * @returns {number} Result
         */
        function md5cmn(q, a, b, x, s, t) {
            return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
        }
        /**
         * Basic operation the algorithm uses.
         *
         * @param {number} a a
         * @param {number} b b
         * @param {number} c c
         * @param {number} d d
         * @param {number} x x
         * @param {number} s s
         * @param {number} t t
         * @returns {number} Result
         */
        function md5ff(a, b, c, d, x, s, t) {
            return md5cmn((b & c) | (~b & d), a, b, x, s, t);
        }
        /**
         * Basic operation the algorithm uses.
         *
         * @param {number} a a
         * @param {number} b b
         * @param {number} c c
         * @param {number} d d
         * @param {number} x x
         * @param {number} s s
         * @param {number} t t
         * @returns {number} Result
         */
        function md5gg(a, b, c, d, x, s, t) {
            return md5cmn((b & d) | (c & ~d), a, b, x, s, t);
        }
        /**
         * Basic operation the algorithm uses.
         *
         * @param {number} a a
         * @param {number} b b
         * @param {number} c c
         * @param {number} d d
         * @param {number} x x
         * @param {number} s s
         * @param {number} t t
         * @returns {number} Result
         */
        function md5hh(a, b, c, d, x, s, t) {
            return md5cmn(b ^ c ^ d, a, b, x, s, t);
        }
        /**
         * Basic operation the algorithm uses.
         *
         * @param {number} a a
         * @param {number} b b
         * @param {number} c c
         * @param {number} d d
         * @param {number} x x
         * @param {number} s s
         * @param {number} t t
         * @returns {number} Result
         */
        function md5ii(a, b, c, d, x, s, t) {
            return md5cmn(c ^ (b | ~d), a, b, x, s, t);
        }

        /**
         * Calculate the MD5 of an array of little-endian words, and a bit length.
         *
         * @param {Array} x Array of little-endian words
         * @param {number} len Bit length
         * @returns {Array<number>} MD5 Array
         */
        function binlMD5(x, len) {
            /* append padding */
            x[len >> 5] |= 0x80 << len % 32;
            x[(((len + 64) >>> 9) << 4) + 14] = len;

            var i;
            var olda;
            var oldb;
            var oldc;
            var oldd;
            var a = 1732584193;
            var b = -271733879;
            var c = -1732584194;
            var d = 271733878;

            for (i = 0; i < x.length; i += 16) {
                olda = a;
                oldb = b;
                oldc = c;
                oldd = d;

                a = md5ff(a, b, c, d, x[i], 7, -680876936);
                d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
                c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
                b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
                a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
                d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
                c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
                b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
                a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
                d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
                c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
                b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
                a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
                d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
                c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
                b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);

                a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
                d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
                c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
                b = md5gg(b, c, d, a, x[i], 20, -373897302);
                a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
                d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
                c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
                b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
                a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
                d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
                c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
                b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
                a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
                d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
                c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
                b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);

                a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
                d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
                c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
                b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
                a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
                d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
                c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
                b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
                a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
                d = md5hh(d, a, b, c, x[i], 11, -358537222);
                c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
                b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
                a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
                d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
                c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
                b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);

                a = md5ii(a, b, c, d, x[i], 6, -198630844);
                d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
                c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
                b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
                a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
                d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
                c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
                b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
                a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
                d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
                c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
                b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
                a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
                d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
                c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
                b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);

                a = safeAdd(a, olda);
                b = safeAdd(b, oldb);
                c = safeAdd(c, oldc);
                d = safeAdd(d, oldd);
            }
            return [a, b, c, d];
        }

        /**
         * Convert an array of little-endian words to a string
         *
         * @param {Array<number>} input MD5 Array
         * @returns {string} MD5 string
         */
        function binl2rstr(input) {
            var i;
            var output = '';
            var length32 = input.length * 32;
            for (i = 0; i < length32; i += 8) {
                output += String.fromCharCode((input[i >> 5] >>> i % 32) & 0xff);
            }
            return output;
        }

        /**
         * Convert a raw string to an array of little-endian words
         * Characters >255 have their high-byte silently ignored.
         *
         * @param {string} input Raw input string
         * @returns {Array<number>} Array of little-endian words
         */
        function rstr2binl(input) {
            var i;
            var output = [];
            output[(input.length >> 2) - 1] = undefined;
            for (i = 0; i < output.length; i += 1) {
                output[i] = 0;
            }
            var length8 = input.length * 8;
            for (i = 0; i < length8; i += 8) {
                output[i >> 5] |= (input.charCodeAt(i / 8) & 0xff) << i % 32;
            }
            return output;
        }

        /**
         * Calculate the MD5 of a raw string
         *
         * @param {string} s Input string
         * @returns {string} Raw MD5 string
         */
        function rstrMD5(s) {
            return binl2rstr(binlMD5(rstr2binl(s), s.length * 8));
        }

        /**
         * Calculates the HMAC-MD5 of a key and some data (raw strings)
         *
         * @param {string} key HMAC key
         * @param {string} data Raw input string
         * @returns {string} Raw MD5 string
         */
        function rstrHMACMD5(key, data) {
            var i;
            var bkey = rstr2binl(key);
            var ipad = [];
            var opad = [];
            var hash;
            ipad[15] = opad[15] = undefined;
            if (bkey.length > 16) {
                bkey = binlMD5(bkey, key.length * 8);
            }
            for (i = 0; i < 16; i += 1) {
                ipad[i] = bkey[i] ^ 0x36363636;
                opad[i] = bkey[i] ^ 0x5c5c5c5c;
            }
            hash = binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
            return binl2rstr(binlMD5(opad.concat(hash), 512 + 128));
        }

        /**
         * Convert a raw string to a hex string
         *
         * @param {string} input Raw input string
         * @returns {string} Hex encoded string
         */
        function rstr2hex(input) {
            var hexTab = '0123456789abcdef';
            var output = '';
            var x;
            var i;
            for (i = 0; i < input.length; i += 1) {
                x = input.charCodeAt(i);
                output += hexTab.charAt((x >>> 4) & 0x0f) + hexTab.charAt(x & 0x0f);
            }
            return output;
        }

        /**
         * Encode a string as UTF-8
         *
         * @param {string} input Input string
         * @returns {string} UTF8 string
         */
        function str2rstrUTF8(input) {
            return unescape(encodeURIComponent(input));
        }

        /**
         * Encodes input string as raw MD5 string
         *
         * @param {string} s Input string
         * @returns {string} Raw MD5 string
         */
        function rawMD5(s) {
            return rstrMD5(str2rstrUTF8(s));
        }
        /**
         * Encodes input string as Hex encoded string
         *
         * @param {string} s Input string
         * @returns {string} Hex encoded string
         */
        function hexMD5(s) {
            return rstr2hex(rawMD5(s));
        }
        /**
         * Calculates the raw HMAC-MD5 for the given key and data
         *
         * @param {string} k HMAC key
         * @param {string} d Input string
         * @returns {string} Raw MD5 string
         */
        function rawHMACMD5(k, d) {
        return rstrHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d));
    }
    /**
     * Calculates the Hex encoded HMAC-MD5 for the given key and data
     *
     * @param {string} k HMAC key
     * @param {string} d Input string
     * @returns {string} Raw MD5 string
     */
    function hexHMACMD5(k, d) {
        return rstr2hex(rawHMACMD5(k, d));
    }

    /**
     * Calculates MD5 value for a given string.
     * If a key is provided, calculates the HMAC-MD5 value.
     * Returns a Hex encoded string unless the raw argument is given.
     *
     * @param {string} string Input string
     * @param {string} [key] HMAC key
     * @param {boolean} [raw] Raw output switch
     * @returns {string} MD5 output
     */
    function fmd5(string, key, raw) {
        if (!key) {
            if (!raw) {
                return hexMD5(string);
            }
            return rawMD5(string);
        }
        if (!raw) {
            return hexHMACMD5(key, string);
        }
        return rawHMACMD5(key, string);
    }

    md5 = fmd5;
    })();

    /*
     * [js-sha1]{@link https://github.com/emn178/js-sha1}
     *
     * @version 0.6.0
     * @author Chen, Yi-Cyuan [emn178@gmail.com]
     * @copyright Chen, Yi-Cyuan 2014-2017
     * @license MIT
     */
         var root = typeof window === 'object' ? window : {};
         var NODE_JS = !root.JS_SHA1_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
         if (NODE_JS) {
            root = global;
        }
        var COMMON_JS = !root.JS_SHA1_NO_COMMON_JS && typeof module === 'object' && module.exports;
        var AMD = typeof define === 'function' && define.amd;
        var HEX_CHARS = '0123456789abcdef'.split('');
        var EXTRA = [-2147483648, 8388608, 32768, 128];
        var SHIFT = [24, 16, 8, 0];
        var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];

        var blocks = [];

        var createOutputMethod = function (outputType) {
            return function (message) {
              return new Sha1(true).update(message)[outputType]();
          };
      };

      var createMethod = function () {
        var method = createOutputMethod('hex');
        if (NODE_JS) {
          method = nodeWrap(method);
      }
      method.create = function () {
          return new Sha1();
      };
      method.update = function (message) {
          return method.create().update(message);
      };
      for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createOutputMethod(type);
      }
      return method;
    };

    var nodeWrap = function (method) {
        var crypto = eval("require('crypto')");
        var Buffer = eval("require('buffer').Buffer");
        var nodeMethod = function (message) {
          if (typeof message === 'string') {
            return crypto.createHash('sha1').update(message, 'utf8').digest('hex');
        } else if (message.constructor === ArrayBuffer) {
            message = new Uint8Array(message);
        } else if (message.length === undefined) {
            return method(message);
        }
        return crypto.createHash('sha1').update(new Buffer(message)).digest('hex');
    };
    return nodeMethod;
    };

    function Sha1(sharedMemory) {
        if (sharedMemory) {
          blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =
          blocks[4] = blocks[5] = blocks[6] = blocks[7] =
          blocks[8] = blocks[9] = blocks[10] = blocks[11] =
          blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
          this.blocks = blocks;
      } else {
          this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      }

      this.h0 = 0x67452301;
      this.h1 = 0xEFCDAB89;
      this.h2 = 0x98BADCFE;
      this.h3 = 0x10325476;
      this.h4 = 0xC3D2E1F0;

      this.block = this.start = this.bytes = this.hBytes = 0;
      this.finalized = this.hashed = false;
      this.first = true;
    }

    Sha1.prototype.update = function (message) {
        if (this.finalized) {
          return;
      }
      var notString = typeof(message) !== 'string';
      if (notString && message.constructor === root.ArrayBuffer) {
          message = new Uint8Array(message);
      }
      var code, index = 0, i, length = message.length || 0, blocks = this.blocks;

      while (index < length) {
          if (this.hashed) {
            this.hashed = false;
            blocks[0] = this.block;
            blocks[16] = blocks[1] = blocks[2] = blocks[3] =
            blocks[4] = blocks[5] = blocks[6] = blocks[7] =
            blocks[8] = blocks[9] = blocks[10] = blocks[11] =
            blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
        }

        if(notString) {
            for (i = this.start; index < length && i < 64; ++index) {
              blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
          }
      } else {
        for (i = this.start; index < length && i < 64; ++index) {
          code = message.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
        } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
        } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
        } else {
            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
        }
    }
    }

    this.lastByteIndex = i;
    this.bytes += i - this.start;
    if (i >= 64) {
        this.block = blocks[16];
        this.start = i - 64;
        this.hash();
        this.hashed = true;
    } else {
        this.start = i;
    }
    }
    if (this.bytes > 4294967295) {
        this.hBytes += this.bytes / 4294967296 << 0;
        this.bytes = this.bytes % 4294967296;
    }
    return this;
    };

    Sha1.prototype.finalize = function () {
        if (this.finalized) {
          return;
      }
      this.finalized = true;
      var blocks = this.blocks, i = this.lastByteIndex;
      blocks[16] = this.block;
      blocks[i >> 2] |= EXTRA[i & 3];
      this.block = blocks[16];
      if (i >= 56) {
          if (!this.hashed) {
            this.hash();
        }
        blocks[0] = this.block;
        blocks[16] = blocks[1] = blocks[2] = blocks[3] =
        blocks[4] = blocks[5] = blocks[6] = blocks[7] =
        blocks[8] = blocks[9] = blocks[10] = blocks[11] =
        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
    }
    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;
    blocks[15] = this.bytes << 3;
    this.hash();
    };

    Sha1.prototype.hash = function () {
        var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4;
        var f, j, t, blocks = this.blocks;

        for(j = 16; j < 80; ++j) {
          t = blocks[j - 3] ^ blocks[j - 8] ^ blocks[j - 14] ^ blocks[j - 16];
          blocks[j] =  (t << 1) | (t >>> 31);
      }

      for(j = 0; j < 20; j += 5) {
          f = (b & c) | ((~b) & d);
          t = (a << 5) | (a >>> 27);
          e = t + f + e + 1518500249 + blocks[j] << 0;
          b = (b << 30) | (b >>> 2);

          f = (a & b) | ((~a) & c);
          t = (e << 5) | (e >>> 27);
          d = t + f + d + 1518500249 + blocks[j + 1] << 0;
          a = (a << 30) | (a >>> 2);

          f = (e & a) | ((~e) & b);
          t = (d << 5) | (d >>> 27);
          c = t + f + c + 1518500249 + blocks[j + 2] << 0;
          e = (e << 30) | (e >>> 2);

          f = (d & e) | ((~d) & a);
          t = (c << 5) | (c >>> 27);
          b = t + f + b + 1518500249 + blocks[j + 3] << 0;
          d = (d << 30) | (d >>> 2);

          f = (c & d) | ((~c) & e);
          t = (b << 5) | (b >>> 27);
          a = t + f + a + 1518500249 + blocks[j + 4] << 0;
          c = (c << 30) | (c >>> 2);
      }

      for(; j < 40; j += 5) {
          f = b ^ c ^ d;
          t = (a << 5) | (a >>> 27);
          e = t + f + e + 1859775393 + blocks[j] << 0;
          b = (b << 30) | (b >>> 2);

          f = a ^ b ^ c;
          t = (e << 5) | (e >>> 27);
          d = t + f + d + 1859775393 + blocks[j + 1] << 0;
          a = (a << 30) | (a >>> 2);

          f = e ^ a ^ b;
          t = (d << 5) | (d >>> 27);
          c = t + f + c + 1859775393 + blocks[j + 2] << 0;
          e = (e << 30) | (e >>> 2);

          f = d ^ e ^ a;
          t = (c << 5) | (c >>> 27);
          b = t + f + b + 1859775393 + blocks[j + 3] << 0;
          d = (d << 30) | (d >>> 2);

          f = c ^ d ^ e;
          t = (b << 5) | (b >>> 27);
          a = t + f + a + 1859775393 + blocks[j + 4] << 0;
          c = (c << 30) | (c >>> 2);
      }

      for(; j < 60; j += 5) {
          f = (b & c) | (b & d) | (c & d);
          t = (a << 5) | (a >>> 27);
          e = t + f + e - 1894007588 + blocks[j] << 0;
          b = (b << 30) | (b >>> 2);

          f = (a & b) | (a & c) | (b & c);
          t = (e << 5) | (e >>> 27);
          d = t + f + d - 1894007588 + blocks[j + 1] << 0;
          a = (a << 30) | (a >>> 2);

          f = (e & a) | (e & b) | (a & b);
          t = (d << 5) | (d >>> 27);
          c = t + f + c - 1894007588 + blocks[j + 2] << 0;
          e = (e << 30) | (e >>> 2);

          f = (d & e) | (d & a) | (e & a);
          t = (c << 5) | (c >>> 27);
          b = t + f + b - 1894007588 + blocks[j + 3] << 0;
          d = (d << 30) | (d >>> 2);

          f = (c & d) | (c & e) | (d & e);
          t = (b << 5) | (b >>> 27);
          a = t + f + a - 1894007588 + blocks[j + 4] << 0;
          c = (c << 30) | (c >>> 2);
      }

      for(; j < 80; j += 5) {
          f = b ^ c ^ d;
          t = (a << 5) | (a >>> 27);
          e = t + f + e - 899497514 + blocks[j] << 0;
          b = (b << 30) | (b >>> 2);

          f = a ^ b ^ c;
          t = (e << 5) | (e >>> 27);
          d = t + f + d - 899497514 + blocks[j + 1] << 0;
          a = (a << 30) | (a >>> 2);

          f = e ^ a ^ b;
          t = (d << 5) | (d >>> 27);
          c = t + f + c - 899497514 + blocks[j + 2] << 0;
          e = (e << 30) | (e >>> 2);

          f = d ^ e ^ a;
          t = (c << 5) | (c >>> 27);
          b = t + f + b - 899497514 + blocks[j + 3] << 0;
          d = (d << 30) | (d >>> 2);

          f = c ^ d ^ e;
          t = (b << 5) | (b >>> 27);
          a = t + f + a - 899497514 + blocks[j + 4] << 0;
          c = (c << 30) | (c >>> 2);
      }

      this.h0 = this.h0 + a << 0;
      this.h1 = this.h1 + b << 0;
      this.h2 = this.h2 + c << 0;
      this.h3 = this.h3 + d << 0;
      this.h4 = this.h4 + e << 0;
    };

    Sha1.prototype.hex = function () {
        this.finalize();

        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;

        return HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +
        HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +
        HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +
        HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +
        HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +
        HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +
        HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +
        HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +
        HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +
        HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +
        HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +
        HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +
        HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +
        HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +
        HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +
        HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +
        HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +
        HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +
        HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +
        HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F];
    };

    Sha1.prototype.toString = Sha1.prototype.hex;

    Sha1.prototype.digest = function () {
        this.finalize();

        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;

        return [
        (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,
        (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,
        (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,
        (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,
        (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF
        ];
    };

    Sha1.prototype.array = Sha1.prototype.digest;

    Sha1.prototype.arrayBuffer = function () {
        this.finalize();

        var buffer = new ArrayBuffer(20);
        var dataView = new DataView(buffer);
        dataView.setUint32(0, this.h0);
        dataView.setUint32(4, this.h1);
        dataView.setUint32(8, this.h2);
        dataView.setUint32(12, this.h3);
        dataView.setUint32(16, this.h4);
        return buffer;
    };

    function VirtualDevice(options) {
        EventEmitter.call(this);

        this.options = options;
        if (this.options === undefined) {
            this.options = {};
        }
        this.dvars = {};
        this.svars = {};
        this.ivars = {};

        this.closed = false;
        if (this.options.eui) {
            this.eui = this.options.eui;
        } else {
            this.eui = Math.random().toString(36).substr(2, 10);
        }
        this.scrt = this.options.scrt;
        this.xid = this.options.xid;
        this.mode = this.options.mode;
        this.networks = this.options.networks;

        if (this.mode === 'feather' || this.mode === 'deadleaf') {
            this.ping();
        } else {
            this.connect();
        }

        var _this = this;
        _this.heartbeat = setInterval(function () {
            if (_this.options.heartbeat !== false) {
                if (_this.auth && _this.options.nearby !== false) {
                    addNearbyDevice(thsq, _this.auth.toString());
                }
            }
            if (_this.mode === 'feather' || _this.mode === 'deadleaf') {
                if (_this.pingsent) {
                    if (new Date().getTime() > _this.lastping + 10000) {
                        _this.ping();
                    }
                }
            } else if (_this.connecting) {
                _this.connect();
            }
        }, 4000);

        if (this.xid && this.eui) {
            if (this.networks === undefined) {
                this.networks = {};
            }
            if (this.networks[this.xid] === undefined) {
                this.networks[this.xid] = {};
            }
            this.networks[this.xid][this.eui] = this;
            if (this.mode === 'master') {
                this.networks[this.xid].master = this;
            } else {
                this.parenteui = this.networks[this.xid].master.eui;
            }
        }
    }

    VirtualDevice.prototype = new EventEmitter();

    VirtualDevice.prototype.setServerVariable = function (key, val, important) {
        if (important) {
            this.ivars[key] = val;
        } else {
            this.svars[key] = val;
        }

    };

    function senddata(d, type, key, val) {
        var array, i;

        if (!val) {
            val = '';
        }
        array = new Uint8Array(1 + key.length + 1 + 2 + val.length);
        array[0] = type.charCodeAt(0);
        for (i = 0; i < key.length; i += 1) {
            array[1 + i] = key.charCodeAt(i);
        }
        array[1 + key.length] = ','.charCodeAt(0);
        array[1 + key.length + 1] = val.length / 256;
        array[1 + key.length + 2] = val.length & 255;
        for (i = 0; i < val.length; i += 1) {
            if (typeof Buffer !== 'undefined' && Buffer.isBuffer(val)) {
                array[1 + key.length + 3 + i] = val[i];
            } else if ((val.constructor !== String)) {
                array[1 + key.length + 3 + i] = val[i];
            } else {
                array[1 + key.length + 3 + i] = val.charCodeAt(i);
            }
        }

        if (d.connection) {
            if (type === 'c') {
                return false;
            }
            if (nodejs) {
                d.connection.sendBytes(Buffer.from(array));
            } else if (browser) {
                if (d.connection.readyState === WebSocket.OPEN) {
                    d.connection.send(array.buffer);
                    return true;
                }
            }
        } else if (d.mode === 'feather' || d.mode === 'deadleaf') {
            if (!d.scrt && type !== 'p') {
                /* Only send pings via feather before we have a scrt */
                return false;
            }

            if (d.eui !== undefined && d.networks !== undefined &&
                    d.networks[d.xid] && d.networks[d.xid].master) {
                if (nodejs) {
                    forwardFeatherMessage(d.networks[d.xid].master, d.eui, Buffer.from(array));
                } else {
                    forwardFeatherMessage(d.networks[d.xid].master, d.eui, array);
                }
                return true;
            }
        } else {
            // not connected
            d.connect();
            return false;
        }
    }
    VirtualDevice.prototype.pushVariable = function (type, key, val) {
        return senddata(this, type, key, val);
    };

    VirtualDevice.prototype.pushServerVariables = function () {
        var i, k;
        var variables;

        if (!this.scrt && !this.connected) {
            /* Only send pings via feather before we have a scrt */
            return false;
        }

        /* Send the important s variables first */
        variables = Object.keys(this.ivars);

        variables = variables.sort(function (a, b) {
            if (a < b) {
                return -1;
            }
            if (a > b) {
                return 1;
            }
            return 0;
        });
        for (i = 0; i < variables.length; i += 1) {
            k = variables[i];
            if (this.ivars[k]) {
                if (this.pushVariable('i', k, this.ivars[k])) {
                    delete this.ivars[k];
                }
            }
        }

        /* Check if we need to retransmit something */
        if (Object.keys(this.ivars).length > 0) {
            var _this = this;
            if (this.rexmittimeout === undefined) {
                this.rexmittimeout = setTimeout(function () {
                    _this.pushServerVariables();
                    delete this.rexmittimeout;
                }, 1000);
            }
        }

        /* Then the regular s variables */
        variables = Object.keys(this.svars);

        variables = variables.sort(function (a, b) {
            if (a < b) {
                return -1;
            }
            if (a > b) {
                return 1;
            }
            return 0;
        });
        for (i = 0; i < variables.length; i += 1) {
            k = variables[i];
            if (this.svars[k]) {
                this.pushVariable('s', k, this.svars[k]);
            }
        }
        this.svars = {};
    };

    VirtualDevice.prototype.pushDeviceVariables = function () {
        var msg, k;

        msg = { d: this.dvars };
        for (k in this.dvars) {
            if (this.dvars.hasOwnProperty(k) && this.dvars[k]) {
                this.pushVariable('d', k, this.dvars[k]);
            }
        }
    };

    VirtualDevice.prototype.getVariable = function (key) {
        return this.dvars[key];
    };

    VirtualDevice.prototype.setVariable = function (key, val) {
        var oldval = this.dvars[key];
        this.dvars[key] = val;
        this.emit('variable', this, key, val, oldval);
        if (this.connection && this.connected) {
            this.pushDeviceVariables();
        }
    };


    VirtualDevice.prototype.ping = function (msg) {
        if (msg === undefined) {
            msg = String(new Date().getTime());
        }
        var pingtext = msg + ',0,0';

        if (this.scrt) {
            if (nodejs) {
                hash = crypto.createHmac('sha1', this.scrt).update(pingtext).digest('hex');
                pingtext += ',' + hash;
            } else {
                var sha1 = createMethod('js-sha1');
                sha1(this.scrt);
                var hash = sha1.create();
                hash.update(pingtext);
                pingtext += ',' + hash.hex();
            }
        }
        senddata(this, 'p', pingtext, '');

        this.lastping = new Date().getTime();
        this.needsdone = true;
        this.pingsent = true;
    };

    function forwardFeatherMessage(dev, eui, msgbuffer) {
        dev.pushVariable('f', eui, msgbuffer);
    }

    function domd5(value) {
        var valuemd5;
        if (crypto && typeof crypto === 'object' && typeof crypto.createHash === 'function') {
            if (value) {
                valuemd5 = crypto.createHash('md5').update(value).digest();
            } else {
                valuemd5 = crypto.createHash('md5').digest();
            }
        } else {
            valuemd5 = md5(value, null, true);
        }
        return valuemd5;
    }

    function receiveMsg(dev, message) {

        var handle_command = function (dev, command, data, avoidack) {
            var key, value, valuemd5, i, length, eui, oldval;

            if (command !== 'fthr' && command !== 'push' &&
                command !== 'sync' && command !== 'fwup' &&
                command !== 'zwup' && command !== 'zwin' &&
                command !== 'pang' && command !== 'pong' &&
                avoidack !== true) {
                senddata(dev, 'c', command.toString(), domd5(message.binaryData));
            }

            if (command === 'bond') {
                var newxid = data.toString();
                if (dev.networks) {
                    if (dev.networks[dev.xid]) {
                        delete dev.networks[dev.xid][dev.eui];
                    }
                    if (dev.networks[newxid] === undefined) {
                        dev.networks[newxid] = {};
                    }
                    if (dev.mode === 'master') {
                        dev.networks[newxid].master = dev;
                    } else {
                        dev.networks[newxid][dev.eui] = dev;
                    }
                }
                if (dev.mode !== 'master') {
                    dev.ping('bond');
                }
                dev.pushVariable('s', '_xid', newxid);
                dev.xid = newxid;

            } else if (command === 'scrt') {
                dev.scrt = data.toString();
            } else if (command === 'auth') {
                dev.auth = data;
                if (dev.options.nearby !== false) {
                    addNearbyDevice(thsq, data.toString());
                }
            } else if (command === 'sync') {
                key = data.toString().split(',')[0];
                value = data.toString().substring(key.length + 1);
                oldval = dev.dvars[key];
                dev.dvars[key] = value;

                senddata(dev, 'm', key, domd5(value));
                dev.emit('variable', dev, key, value, oldval);

                if (key === 'peui') {
                    dev.parenteui = value;
                    if (dev.options.mode === 'feather') {
                        dev.sendStats();
                    }
                }
            } else if (command === 'iack') {
                key = data.toString().split(',')[0];
                delete dev.ivars[key];
            } else if (command === 'push') {
                key = data.toString().split(',')[0];
                value = data.toString().substring(key.length + 1);
                oldval = dev.dvars[key];
                dev.dvars[key] = value;

                valuemd5 = md5(value, null, true);
                senddata(dev, 'A', key, domd5(value));
                dev.emit('variable', dev, key, value, oldval);

                if (key === 'peui') {
                    dev.parenteui = value;
                    if (dev.options.mode === 'feather') {
                        dev.sendStats();
                    }
                }
            } else if (command === 'zraw' && dev.mode === 'master') {
                if (dev.networks && dev.networks[dev.xid]) {
                    for (eui in dev.networks[dev.xid]) {
                        receiveMsg(dev.networks[dev.xid][eui], { type: 'binary', binaryData: data });
                    }
                }
            } else if (command === 'fthr' && dev.mode === 'master') {
                var fmessage;
                eui = data.toString().split(',')[0];
                fmessage = data.slice(eui.length + 1);
                if (dev.networks && dev.networks[dev.xid] &&
                    dev.networks[dev.xid][eui]) {
                    if (nodejs) {
                        receiveMsg(dev.networks[dev.xid][eui], { type: 'binary', binaryData: Buffer.from(fmessage) });
                    } else {
                        receiveMsg(dev.networks[dev.xid][eui], { type: 'binary', binaryData: fmessage });
                    }
                }
            } else if (command === 'xcmd') {

                var parsexcmd = function (xcmd) {
                    var i;
                    var xcmdcommands = [];
                    i = 4;
                    while (i < xcmd.length) {
                        var cmdlen = xcmd[i];
                        if (nodejs) {
                            xcmdcommands.push(Buffer.from(xcmd.subarray(i + 3, i + 3 + cmdlen)));
                        } else {
                            xcmdcommands.push(Uint8Array.from(xcmd.subarray(i + 3, i + 3 + cmdlen)));
                        }
                        i += cmdlen + 3;
                    }
                    return xcmdcommands;
                };


                var prettyprintcommand = function (c) {
                    if (c.toString().substring(0, 4) === 'xcmd') {
                        return 'xcmd (' + parsexcmd(c).map(prettyprintcommand).join(', ') + ')';
                    } else if (c.toString().substring(0, 4) === 'iack') {
                        return c.toString().split(',')[0];
                    } else {
                        return c.toString().substring(0, 4);
                    }
                };

                var xcmdcommands;
                if (nodejs) {
                    xcmdcommands = parsexcmd(Buffer.concat([ Buffer.from('xcmd'), Buffer.from(data) ]));
                } else {
                    var concat = function (a, b) {
                        var c = new a.constructor(a.length + b.length);
                        c.set(a);
                        c.set(b, a.length);
                        return c;
                    }
                    xcmdcommands = parsexcmd(concat(Uint8Array.from('xcmd'), Uint8Array.from(data)));
                }

                for (i = 0; i < xcmdcommands.length; i += 1) {
                    handle_command(dev, xcmdcommands[i].toString().substring(0, 4), xcmdcommands[i].slice(4), true);
                }

            } else if (command === 'stat') {
                dev.sendStats(data);
            } else if (command === 'pang') {
                dev.connect();
            } else if (command === 'pong') {
                dev.pingsent = false;
                key = data.toString().split(',')[0];
                senddata(dev, 'P', key, '');
                dev.pushServerVariables();

            } else if (command === 'done') {
                dev.needsdone = false;
                dev.pushServerVariables();
            }
            dev.emit('command', dev, command, data);
        };

        var command, data;
        if (message.type === 'utf8') {

            command = message.utf8Data.substring(0, 4);
            data = message.utf8Data.substring(4);

        } else if (message.type === 'binary') {
            command = message.binaryData.toString('utf8').slice(0, 4);
            data = message.binaryData.slice(4);
        }
        handle_command(dev, command, data);

    }


    VirtualDevice.prototype.getCookie = function () {
        var host, cookie;
        if (this.options.cookie) {
            cookie = this.options.cookie;
        } else {
            host = thsq.getServer();
            if (jar) {
                cookie = jar.getCookieString(host);
            }
        }
        return cookie;
    };

    VirtualDevice.prototype.sendStats = function (variable) {
        this.setServerVariable('p', this.parenteui + ',-10,256,512,0,-10', true);
        this.pushServerVariables();
    };


    VirtualDevice.prototype.getEUI = function () {
        return this.eui;
    };

    VirtualDevice.prototype.connect = function () {
        var _this, timeout;
        _this = this;

        if (this.connected === true || this.connecting) {
            return;
        }

        this.connecting = true;

        timeout = 0;

        function onmessage(message) {
            if (message.data) {
                // For when running in browser
                var msg = { type: 'binary',
                            binaryData: String.fromCharCode.apply(null, new Uint8Array(message.data)) };
                message = msg;
            }

            receiveMsg(_this, message);
        }

        function doclose(type, event) {
            var wasconnected = false;
            if (_this.connected === true) {
                wasconnected = true;
            }
            _this.connected = false;
            _this.connecting = false;
            _this.lasterror = type + ' ' + JSON.stringify(event);

            if (_this.socket) {
                if (typeof _this.socket.removeAllListeners === 'function') {
                    _this.socket.removeAllListeners();
                }
                delete _this.socket;
            }
            if (_this.connection) {
                if (typeof _this.connection.removeAllListeners === 'function') {
                    _this.connection.removeAllListeners();
                }
                delete _this.connection;
            }

            if (wasconnected) {
                _this.emit('server-disconnected', type, event);
            }
        }

        function onclose(event) {
            doclose('close', event);
        }
        function onerror(event) {
            doclose('error', event);
        }

        function onopen() {
            var sid;
            _this.connected = true;
            sid = '';
            sid += 'eui:' + _this.eui + ',';
            if (_this.options.mode) {
                sid += 'default-mode:' + _this.options.mode + ',';
            }
            if (_this.options.platform) {
                sid += 'platform:' + _this.options.platform + ',';
            } else {
                sid += 'platform:thsq-virtual,';
            }
            if (npm_pkg_version === undefined) {
                sid += 'fwid:4.7.0,';
            } else {
                sid += 'fwid:4.7.' + npm_pkg_version + ',';
            }
            _this.setServerVariable('id', sid, true);

            if (_this.options.location) {
                _this.setServerVariable('location', _this.options.location);
            }
            if (_this.options.name) {
                _this.setServerVariable('name', _this.options.name);
            }

            if (_this.lasterror) {
                _this.setServerVariable('lasterror', _this.lasterror);
                delete _this.lasterror;
            }
            if (_this.options.xid) {
                _this.setServerVariable('_xid', _this.options.xid, true);
                _this.pushServerVariables();
            }

            if (_this.options.mode === 'master') {
                _this.setVariable('mode', _this.options.mode);
            }
            if (_this.options.mode === 'feather') {
                _this.sendStats();
            }
            _this.pushDeviceVariables();
            _this.pushServerVariables();
            _this.pushVariable('g', '', '');

            if (_this.pingtimer === undefined) {
                _this.pingtimer = setInterval(function () {
                    if (_this.connected) {
                        if (nodejs) {
                            if (_this.connection) {
                                _this.connection.ping();
                            }
                        }
                    }
                }, 60000);
            }

            _this.emit('server-connected');
        }

        setTimeout(function () {
            var protocol, host;

            if (nodejs) {
                if (_this.socket && typeof _this.socket.removeAllListeners === 'function') {
                    _this.socket.removeAllListeners();
                }
                _this.socket = new WebSocketClient();
                _this.socket.on('connectFailed', function(error) {
                    /* Make sure a server-disconnected event gets posted by setting .connected to true */
                    _this.connected = true;
                    doclose('error', error);
                    _this.connected = false;
                });

                _this.socket.on('connect', function(connection) {
                    _this.connection = connection;
                    connection.on('error', onerror);
                    connection.on('close', onclose);
                    connection.on('message', onmessage);
                    onopen();
                });

                host = thsq.getServer();
                protocol = host.split('//')[0];
                var wsprotocol;
                if (protocol === 'https:') {
                    wsprotocol = 'wss://';
                } else if (protocol === 'http:') {
                    wsprotocol = 'ws://';
                }

                var cookie = '', endpoint;
                if (_this.options.deterministicscrt) {

                    if (_this.options.frontend && _this.eui) {
                        endpoint = '/device/' + _this.eui + '/' + _this.options.frontend;
                    } else {
                        throw new Error('Cannot create a device with deterministic scrt without frontend and eui');
                    }
                } else if (_this.options.virtualdevice === false) {
                    endpoint = '/device';
                    if (_this.scrt) {
                        cookie = 'thsqtoken=' + _this.scrt;
                    }
                } else {
                    /* Normal virtual device behavior */
                    cookie = _this.getCookie();
                    _this.options.cookie = cookie;
                    endpoint = '/virtual-device/' + _this.eui;
                }
                _this.socket.connect(wsprotocol + host.split('//')[1] + endpoint, 'thsq', null,
                    { Cookie: cookie });

            } else if (browser) {
                var server = thsq.getServer();
                if (server && server.split('//')[1]) {

                    if (server.split('//')[0] === 'http:') {
                        protocol = 'ws://';
                    } else {
                        protocol = 'wss://';
                    }

                    host = server.split('//')[1];
                } else if (location.protocol === 'file:') {
                    protocol = 'wss://';
                    host = 'developer.thingsquare.com';
                } else {
                    protocol = 'ws://';
                    if (typeof location === 'undefined' || location.protocol === 'https:') {
                        protocol = 'wss://';
                    }
                    if (typeof location !== 'undefined' ) {
                        host = location.hostname;
                    }
                    if (!host.match(/.+\.thingsquare\.com/) && !host.match(/.+\.thsq\.io/) &&
                        !host.match(/.+\.thsq\.local/) &&
                        !location.hostname.match(/(\d+)\.(\d+)\.(\d+)\.(\d+).*/)) {
                        protocol = 'wss://';
                        host = 'developer.thingsquare.com';
                    }
                }

                _this.connection = new WebSocket(protocol + host + '/virtual-device/' + _this.eui, 'thsq');
                _this.connection.binaryType = 'arraybuffer';

                _this.connection.onopen = onopen;
                _this.connection.onerror = onerror;
                _this.connection.onclose = onclose;
                _this.connection.onmessage = onmessage;
            }

        }, timeout);
    };

    VirtualDevice.prototype.close = function () {
        clearInterval(this.heartbeat);
        clearInterval(this.pingtimer);
        this.closed = true;
        this.connected = false;
        if (this.socket) {
            if (typeof this.socket.removeAllListeners === 'function') {
                this.socket.removeAllListeners();
            }
            delete this.socket;
        }
        if (this.connection) {
            this.connection.close();
            if (typeof this.connection.removeAllListeners === 'function') {
                this.connection.removeAllListeners();
            }
            delete this.connection;
        }
    };

    function clone(obj) {
        if (obj !== undefined) {
            return JSON.parse(JSON.stringify(obj));
        }
    }

    function getDeviceFromCache(thsq, unique) {
        if (thsq.devicecache[unique] && thsq.devicecache[unique].device) {
            return thsq.devicecache[unique].device;
        }
    }

    function deviceunique(device) {
        if (device && device.meta && device.meta.unique) {
            return device.meta.unique.value;
        }
    }

    function Thsq() {
        var _this = this;
        EventEmitter.call(this);

        this.inited = false;
        this.initcallbacks = [];

        this.options = {};

        this.setServer();
        this.app = this.getApp();

        this.fetchqueues = {};
        this.fetching = {};
        this.fetchingnow = {};
        this.fetchingtimeout = {};

        this.usercache = {};

        this.devicecache = {};
        this.devicesfetching = {};

        this.claimeduniqueids = {};
        this.deviceuniqueids = {};

        this.dauthcache = {};
        this.nearbydevices = {};
        this.nearbyerrordevices = {};
        this.nearbydevicesrssi = {};
    }

    Thsq.prototype = new EventEmitter();

    /* Convenience functions */

    Thsq.prototype.isacked = function (v) {
        function valuesareequal(value1, value2) {
            if (value1 == null && value2 == null) {
                return true;
            }
            return thsq.valuestring(value1) === thsq.valuestring(value2);
        }
        if (v === undefined || v === null) {
            return false;
        }
        if (v.acked && v.syncacked) {
            if (v.time > v.acked && v.time > v.syncacked) {
                return false;
            }
        } else if (v.acked) {
            if (v.time > v.acked) {
                return false;
            }
        } else if (v.syncacked) {
            if (v.time > v.syncacked) {
                return false;
            }
        }
        if (valuesareequal(v.value, v.ackedvalue)) {
            return true;
        }
        return false;
    };

    Thsq.prototype.valuestring = function (value) {
        if (value !== undefined) {
            if (typeof value === 'string') {
                return value;
            } else if (typeof value === 'object' && value !== null && value.data) {
                return String.fromCharCode.apply(null, value.data);
            } else if (Array.isArray(value)) {
                return String.fromCharCode.apply(null, value);
            }
            return String(value);
        }
    };

    Thsq.prototype.valuebuffer = function (val) {
        if (val && typeof val === 'object' && val.type === 'Buffer') {
            return val;
        }
        if (val && typeof val === 'string') {
            return {
                type: 'Buffer',
                data: Array.from(val).map(function(c) {
                    return c.charCodeAt(0);
                })
            };
        }
        return {
            type: 'Buffer',
            data: [ Number(val) ]
        };
    };



    Thsq.prototype.devicename = function (device) {
        function raw() {
            if (device && device.s && device.s.name && device.s.name.value) {
                return thsq.valuestring(device.s.name.value);
            }
            if (device && device.s && thsq.devicePlatform(device)) {
                var eui = '';
                if (thsq.deviceEUI(device) && thsq.deviceEUI(device).substring(12, 16)) {
                    eui = ' (' + thsq.deviceEUI(device).substring(12, 16) + ')';
                }
                return thsq.devicePlatform(device) + eui;
            }
            return 'Unknown';
        }

        return raw().replace(/<|>/g, '');
    };


    Thsq.prototype.deviceidstring = function (devicedata, str) {
        var r;
        if (devicedata && devicedata.s && devicedata.s.id && typeof devicedata.s.id.value === 'string') {
            r = devicedata.s.id.value.split(',').filter(function (e) { return e.split(':')[0] === str; });
            if (r.length > 0) {
                return r[0].split(':')[1];
            }
        }
    };

    Thsq.prototype.devicefwver = function (devicedata) {
        var fwver;
        fwver = thsq.deviceidstring(devicedata, 'fwver');
        if (!fwver) {
            if (devicedata && devicedata.s && devicedata.s.fwver) {
                fwver = devicedata.s.fwver.value;
            }
        }
        return Number(fwver);
    };


    Thsq.prototype.devicefwid = function (devicedata) {
        var fwid;
        fwid = thsq.deviceidstring(devicedata, 'fwid');
        if (!fwid) {
            if (devicedata && devicedata.s && devicedata.s.fwid) {
                fwid = devicedata.s.fwid.value;
            }
        }
        return fwid;
    };



    Thsq.prototype.devicefreq = function (devicedata) {
        return thsq.deviceidstring(devicedata, 'freq');
    };

    Thsq.prototype.devicepower = function (devicedata) {
        var power;
        power = thsq.deviceidstring(devicedata, 'power');
        if (!power) {
            if (devicedata && devicedata.s && devicedata.s.power) {
                power = devicedata.s.power.value;
            }
        }
        return power;
    };

    Thsq.prototype.variablevalue = function (device, type, name, fallback) {
        if (device && device[type] && device[type][name]) {
            return device[type][name].value;
        }
        return fallback;
    };

    Thsq.prototype.variableage = function (device, type, name, fallback) {
        if (device && device[type] && device[type][name]) {
            return new Date().getTime() - device[type][name].time;
        }
        return fallback;
    };


    Thsq.prototype.variabletime = function (device, type, name, fallback) {
        if (device && device[type] && device[type][name]) {
            return device[type][name].time;
        }
        return fallback;
    };

    Thsq.prototype.ackedvariablevalue = function (device, type, name, fallback) {
        if (device && device[type] && device[type][name]) {
            return device[type][name].ackedvalue;
        }
        return fallback;
    };

    Thsq.prototype.variablevaluebuffer = function (device, type, name, fallback) {
        var val = thsq.variablevalue(device, type, name, fallback);
        return thsq.valuebuffer(val);
    };

    Thsq.prototype.ackedvariablevaluebuffer = function (device, type, name, fallback) {
        var val = thsq.ackedvariablevalue(device, type, name, fallback);
        return thsq.valuebuffer(val);
    };

    Thsq.prototype.ackedvariablevaluestring = function (device, type, name, fallback) {
        var val = thsq.ackedvariablevalue(device, type, name, fallback);
        if (val && typeof val === 'object' && val.type === 'Buffer') {
            return String.fromCharCode.apply(null, val.data);
        }
        if (val !== undefined) {
            return val;
        }
        return fallback;
    };

    Thsq.prototype.variablevaluenum = function (device, type, name, fallback) {
        var val = thsq.variablevaluestring(device, type, name, fallback);
        var num = Number(val);
        if (Number.isNaN(num)) {
            return fallback;
        }
        return num;
    };

    Thsq.prototype.variablevaluestring = function (device, type, name, fallback) {
        var val = thsq.variablevalue(device, type, name, fallback);
        if (val && typeof val === 'object' && val.type === 'Buffer') {
            return String.fromCharCode.apply(null, val.data);
        }
        if (val !== undefined) {
            return String(val);
        }
        return fallback;
    };

    Thsq.prototype.variablevaluestringnum = function (device, type, name, num, fallback) {
        var val = thsq.variablevaluestring(device, type, name, '-').split(',')[num];
        if (val === undefined) {
            return fallback;
        }
        return val;
    };


    Thsq.prototype.variablevaluenumbernum = function (device, type, name, num, fallback) {
        var n = Number(thsq.variablevaluestring(device, type, name, '-').split(',')[num]);
        if (Number.isNaN(n)) {
            return fallback;
        }
        return n;
    };



    Thsq.prototype.currentmode = function (device) {

        if (thsq.variablevaluestring(device, 'meta', 'current-mode')) {
            return thsq.variablevaluestring(device, 'meta', 'current-mode').split(',');
        }
        if (thsq.variablevaluestring(device, 'd', 'deadleaf')) {
            return ['unknown', device.d.deadleaf.value];
        }
        return ['unknown', 60];
    };

    Thsq.prototype.reachable = function (device) {
        var now, interval, time, wakeup;

        if (device.meta.wakeup) {
            wakeup = Number(device.meta.wakeup.value);
        } else if (thsq.deviceEUI(device)) {
            wakeup = Number.parseInt(thsq.deviceEUI(device).slice(-8), 16);
        }
        if (thsq.currentmode(device)[0] !== 'deadleaf') {
            return 0;
        }
        if (thsq.currentmode(device)[1]) {
            interval = thsq.currentmode(device)[1];
        } else {
            interval = 60;
        }

        now = new Date().getTime() / 1000;

        time = (interval + (wakeup % interval) - (now % interval)) % interval;

        if (time === 0) {
            time = interval;
        }
        return (now + time) * 1000;
    };



    Thsq.prototype.createVirtualDevice = function (options) {
        return new VirtualDevice(options);
    };

    function updateUserCache(thsq, callback) {
        thsq.getUser(function (data) {
            var wasloggedin;
            thsq.usercache = data;

            thsq.nearbyerrordevices = {};

            wasloggedin = thsq.loggedin;
            thsq.loggedin = thsq.usercache !== undefined && Object.keys(thsq.usercache).length !== 0 && thsq.usercache.login !== '';

            if (wasloggedin === undefined) {
                if (thsq.loggedin === true) {
                    thsq.emit('logged-in');
                } else if (thsq.loggedin === false) {
                    thsq.emit('logged-out');
                }
            } else if (wasloggedin === true && thsq.loggedin === false) {
                thsq.emit('logged-out');
            } else if (wasloggedin === false && thsq.loggedin === true) {
                thsq.emit('logged-in');
            }
            fetchUpdateDeviceCache(thsq, undefined, function () {
                callback(data);
            });
        });
    }

    function fetch(thsq, queue, options) {
        var _this;

        _this = thsq;

        if (thsq.fetchqueues[queue] === undefined) {
            thsq.fetchqueues[queue] = [];
        }
        thsq.fetchqueues[queue].push(options);

        function queuelen() {
            var q, num;
            num = 0;
            for (q in thsq.fetchqueues) {
                num += thsq.fetchqueues[q].length;
            }
            return num;
        }
        function fetchnext() {
            var f, calloptions, method, data;
            if (_this.fetching[queue] !== true) {
                if (_this.fetchqueues[queue]) {
                    f = _this.fetchqueues[queue].shift();
                }
                if (!f) {
                    var listeners = 0;
                    var ev;
                    for (ev in _this.eventNames()) {
                        listeners += _this.listenerCount(_this.eventNames()[ev]);
                    }
                    if (listeners === 0) {
                        if (typeof XMLHttpRequest === 'undefined') {
                            var q;
                            var num = queuelen();
                            for (q in thsq.fetchingnow) {
                                if (thsq.fetchingnow[q] !== undefined) {
                                    num += 1;
                                }
                            }
                            if (num === 0 && _this.options.exit === true) {
                                _this.exit();
                            }
                        }
                    }
                    return;
                }
                if (f) {

                    var timeout = 40000;
                    if (thsq.options.timeout) {
                        timeout = thsq.options.timeout;
                    }

                    _this.fetchingnow[queue] = f;
                    _this.fetching[queue] = true;
                    if (_this.fetchingtimeout[queue]) {
                        clearTimeout(_this.fetchingtimeout[queue]);
                    }
                    _this.fetchingtimeout[queue] = setTimeout(function () {
                        while (_this.fetchqueues[queue] && _this.fetchqueues[queue].length > 0) {
                            f = _this.fetchqueues[queue].shift();
                            if (typeof f.error === 'function') {
                                f.error('timeout');
                            }
                        }
                        _this.fetching[queue] = false;
                        delete _this.fetchingnow[queue];
                        fetchnext();
                    }, timeout + 5000);
                    method = 'GET';
                    if (f.method) {
                        method = f.method;
                    }
                    data = {};
                    if (f.data) {
                        data = f.data;
                    }
                    data.app = _this.app;

                    var t0 = new Date().getTime();

                    calloptions = {
                        url: f.url,
                        xhrFields: { withCredentials: true },
                        data: data,
                        method: method,
                        timeout: timeout,
                        success: function (e, status, xhr) {
                            if (f === _this.fetchingnow[queue]) {
                                f.success(e, status, xhr);
                            }
                        },
                        error: function (xhr, status) {
                            if (f === _this.fetchingnow[queue]) {
                                f.error(status, xhr);
                            }
                        },
                        complete: function (xhr, status) {
                            if (f === _this.fetchingnow[queue]) {
                                _this.emit('server-loading-done', f.url, method,
                                            { time: new Date().getTime() - t0, status: status, queuelen: queuelen() });
                                _this.fetching[queue] = false;
                                delete _this.fetchingnow[queue];
                                clearTimeout(_this.fetchingtimeout[queue]);
                                delete _this.fetchingtimeout[queue];
                                fetchnext();
                            }
                        }
                    };
                    _this.emit('server-loading', f.url, method);
                    ajax(calloptions);
                } else {
                    if (_this.fetchingtimeout[queue]) {
                        clearTimeout(_this.fetchingtimeout[queue]);
                    }
                }
            }
        }

        fetchnext();
    }

    Thsq.prototype.setDeviceHistoryFilter = function () {
        throw new Error('obsolete thsq.setDeviceHistoryFilter(), see thsq.addHistoryListener()');
    };

    Thsq.prototype.setServer = function (host, app) {
        if (host) {
            this.host = host;
        } else {
            if (this.options.server) {
                if (this.options.server.indexOf('http') === 0) {
                    this.host = this.options.server;
                } else {
                    this.host = 'https://' + this.options.server;
                }
            } else {
                if (typeof location !== 'undefined' && (location.protocol === 'https:' || location.protocol === 'http:')) {
                    if (!location.hostname.match(/.+\.thingsquare\.com/) && !location.hostname.match(/.+\.thsq\.io/) &&
                        !location.hostname.match(/.+\.thsq\.local/) &&
                        location.hostname.indexOf('.') !== -1 &&
                        !location.hostname.match(/(\d+)\.(\d+)\.(\d+)\.(\d+).*/)) {
                        this.host = 'https://developer.thingsquare.com';
                    } else {
                        this.host = '';
                    }
                } else {
                    this.host = 'https://developer.thingsquare.com';
                }
            }
        }
        if (app) {
            this.app = app;
        } else {
            if (this.options.frontend) {
                this.app = this.options.frontend;
            } else {
                var name;
                this.app = '0ac48bf3-9fab-4bad-8455-e394808eda6b';
                if (typeof location !== 'undefined') {
                    name = location.hostname.split('.')[0];
                    if (name && name.match(/\w+-\w+-\d+/)) {
                        this.app = name;
                    }
                }
            }
        }
    };

    Thsq.prototype.getServer = function () {
        if (this.host) {
            return this.host;
        }

        var port = '';
        if (typeof location !== 'undefined' && location.port && location.port !== 443 && location.port !== 80) {
            port = ':' + location.port;
        }

        return location.protocol + '//' + location.hostname + port;
    };

    Thsq.prototype.getApp = function () {
        var name;
        if (this.app) {
            return this.app;
        }
        name = location.hostname.split('.')[0];
        if (name && name.match(/\w+-\w+-\d+/)) {
            return name;
        }
        return 'b72af87d-42d7-4f09-bf8c-b9f721a3e6ef';
    };

    Thsq.prototype.deviceStateName = function (state) {
        if (state === 0) {
            return 'Not connected';
        }
        if (state === 1) {
            return 'Waiting for channel';
        }
        if (state === 2) {
            return 'Waiting for mesh';
        }
        if (state === 3) {
            return 'Waiting for gateway';
        }
        if (state === 4) {
            return 'Waiting for server';
        }
        if (state === 5) {
            return 'Waiting for Internet';
        }
        if (state === 6) {
            return 'Waiting for connection';
        }
        if (state === 7) {
            return 'Waiting for authentication';
        }
        if (state === 9) {
            return 'Network cable unplugged';
        }
        if (state === 10) {
            return 'Waiting for network';
        }
    };

    function addNearbyDeviceActual(_this, key, state, platform, rssi, data) {
        if (!key) {
            return;
        }
        if (_this.nearbyerrordevices[key]) {
            if ((_this.nearbyerrordevices[key].time.getTime() - new Date().getTime() + 60000) > 0) {
                return;
            } else {
                delete _this.nearbyerrordevices[key];
            }
        }
        if (platform !== undefined && state !== undefined) {
            _this.emit('device-unknown-nearby-seen', key, platform, state);
        } else if (!fetchingDeviceToCache(_this, key)) {
            var unique;
            if (_this.dauthcache[key]) {
                unique = _this.dauthcache[key];
            }
            if (unique && _this.nearbydevices[unique] && _this.nearbydevices[unique].device &&
                    _this.nearbydevices[unique].time.getTime() > new Date().getTime() - 4000) {
                if (rssi !== undefined) {
                    _this.nearbydevicesrssi[unique] = rssi;
                }
                _this.emit('device-nearby-seen', _this.nearbydevices[unique].device, unique, state);
            } else {
                fetchDeviceToCache(_this, key, function (device, err) {
                    if (device) {
                        unique = deviceunique(device);
                        _this.dauthcache[key] = unique;
                        if (rssi !== undefined) {
                            _this.nearbydevicesrssi[unique] = rssi;
                        }
                        if (_this.nearbydevices[unique]) {
                            _this.emit('device-nearby-seen', device, unique, state);
                        } else {
                            _this.emit('device-nearby-first-seen', device, unique, state);
                            _this.emit('device-nearby-seen', device, unique, state);
                        }
                        _this.nearbydevices[unique] = {
                            time: new Date(),
                            id: key,
                            device: device
                        };
                    } else {
                        if (!_this.nearbyerrordevices[key]) {
                            _this.nearbyerrordevices[key] = {
                                time: new Date(),
                                id: key
                            };
                        }
                    }
                });
            }
        }
    }
    function addNearbyDevice(_this, key, state, platform, rssi, data) {
        setTimeout(function () {
            addNearbyDeviceActual(_this, key, state, platform, rssi, data);
        }, 0);
    }


    Thsq.prototype.setFcmNotification = function (cb) {
        this.fcmCallback = cb;
    };

    Thsq.prototype.fcmFilterOnUsername = function (username) {
        if (typeof AndroidFCMService !== 'undefined') {
            if (username) {
                AndroidFCMService.setCurrentUsername(username);
            } else {
                AndroidFCMService.setCurrentUsername('loggedout');
            }
        }
    };

    Thsq.prototype.getCachedFcmToken = function () {
        return this.fcmToken;
    };

    Thsq.prototype.removeDevice = function (unique, callback) {
        var _this = this;
        convertToIdFromUnique(this, unique, function (id) {
            fetch(_this, 'user', {
                url: _this.host + '/0/devices/' + id,
                method: 'DELETE',
                success: function (e) {
                    if (typeof callback === 'function') {
                        callback(e);
                    }
                },
                error: function () {
                    if (typeof callback === 'function') {
                        callback();
                    }
                }
            });
        });
    };

    Thsq.prototype.claimDevice = function (unique, callback) {
        var _this = this;
        convertToIdFromUnique(this, unique, function (key) {
            fetch(_this, 'user', {
                url: _this.host + '/0/devices/',
                method: 'POST',
                data: { auth: key },
                success: function (e) {
                    if (typeof callback === 'function') {
                        callback(e);
                    }
                },
                error: function (e) {
                    if (typeof callback === 'function') {
                        callback(e);
                    }
                }
            });
        });
    };

    Thsq.prototype.replaceDevice = function (oldunique, newunique, callback) {
        var _this = this;
        convertToIdFromUnique(_this, oldunique, function (key) {
            convertToIdFromUnique(_this, newunique, function (replace) {
                fetch(_this, 'user', {
                    url: _this.host + '/0/devices/' + key,
                    method: 'POST',
                    data: { replace: replace },
                    success: function (e) {
                        fetchUpdateDeviceCache(thsq, undefined, function () {
                            if (typeof callback === 'function') {
                                callback(e);
                            }
                        });
                    },
                    error: function (e) {
                        if (typeof callback === 'function') {
                            callback(e);
                        }
                    }
                });
            });
        });
    };

    Thsq.prototype.shareDevice = function (unique, username, callback) {
        var _this = this;
        convertToIdFromUnique(this, unique, function (id) {
            fetch(_this, 'user', {
                url: _this.host + '/0/devices/',
                method: 'POST',
                data: { auth: id, user: username },
                success: function (e) {
                    if (typeof callback === 'function') {
                        callback(e);
                    }
                },
                error: function (e) {
                    if (typeof callback === 'function') {
                        callback(e);
                    }
                }
            });
        });
    };

    Thsq.prototype.sendPing = function () {
        if (this.dontPing) {
            return;
        }
        if (this.connected && this.connection) {
            this.connection.send("ping");
        }
    };

    Thsq.prototype.session = function (callback) {
        var _this = this;

        fetch(_this, 'user', {
            url: _this.host + '/0/session/',
            method: 'POST',
            data: { token: _this.options.token },
            success: function (data, status) {
                _this.disconnect();
                updateUserCache(_this, function () {
                    if (typeof callback === 'function') {
                        callback(data);
                    }
                });
            },
            error: function (data) {
                _this.disconnect();
                updateUserCache(_this, function () {
                    if (typeof callback === 'function') {
                        callback(data);
                    }
                });
            }
        });
    };

    Thsq.prototype.logout = function (callback) {
        var _this = this;
        delete _this.options.token;
        _this.devicecache = {};
        _this.claimeduniqueids = {};
        _this.deviceuniqueids = {};
        fetch(_this, 'user', {
            url: _this.host + '/0/session/logout',
            method: 'POST',
            success: function (data) {
                /* Create new anon session */
                _this.session(callback);
            },
            error: function () {
                /* Create new anon session */
                updateUserCache(_this, function () {
                    if (typeof callback === 'function') {
                        callback();
                    }
                });
            }
        });
    };

    Thsq.prototype.login = function (username, password, callback) {
        var _this = this;
        fetch(_this, 'user', {
            url: _this.host + '/0/session/login',
            method: 'POST',
            data: {
                login: username,
                password: password,
            },
            success: function (data) {
                _this.disconnect();
                _this.reconnect();
                updateUserCache(_this, function () {
                    if (typeof callback === 'function') {
                        callback(data);
                    }
                });
            },
            error: function (data) {
                _this.disconnect();
                _this.reconnect();
                updateUserCache(_this, function () {
                    if (typeof callback === 'function') {
                        callback(data);
                    }
                });
            }
        });
    };

    Thsq.prototype.getFirmwarelist = function (callback) {
        var _this = this;
        fetch(_this, 'user', {
            url: _this.host + '/0/firmware/',
            success: function (e) {
                callback(JSON.parse(e));
            },
            error: callback
        });
    };

    Thsq.prototype.stopFirmwareUpdate = function (unique, callback) {
        var _this = this;
        convertToIdFromUnique(this, unique, function (id) {
            fetch(_this, 'user', {
                url: _this.host + '/0/devices/' + id + '/firmware/',
                method: 'DELETE',
                success: function (data) {
                    if (typeof callback === 'function') {
                        callback(data);
                    }
                },
                error: function (data) {
                    if (typeof callback === 'function') {
                        callback(data);
                    }
                }
            });
        });
    };

    Thsq.prototype.startFirmwareUpdate = function (unique, firmwarename, callback) {
        var _this = this;
        convertToIdFromUnique(this, unique, function (id) {
            fetch(_this, 'device', {
                url: _this.host + '/0/devices/' + id + '/firmware/' + firmwarename,
                method: 'POST',
                success: function (data) {
                    if (typeof callback === 'function') {
                        callback(data);
                    }
                },
                error: function (data) {
                    if (typeof callback === 'function') {
                        callback(data);
                    }
                }
            });
        });
    };

    Thsq.prototype.startNetworkUpdate = function (unique, firmwarename, callback) {
        var _this = this;
        convertToIdFromUnique(this, unique, function (id) {
            fetch(_this, 'device', {
                url: _this.host + '/0/devices/' + id + '/zwup/' + firmwarename,
                method: 'POST',
                success: function (data) {
                    if (typeof callback === 'function') {
                        callback(data);
                    }
                },
                error: function (data) {
                    if (typeof callback === 'function') {
                        callback(data);
                    }
                }
            });
        });
    };

    Thsq.prototype.getDevicelist = function (callback) {
        var devicelist, _this;
        _this = this;
        function populatedevicelist() {
            var unique;
            devicelist = {};
            for (unique in _this.claimeduniqueids) {
                if (_this.devicecache[unique]) {
                    devicelist[unique] = clone(_this.devicecache[unique].device);
                } else {
                    delete devicelist[unique];
                }
            }
            callback(devicelist);
        }
        if (Object.keys(this.claimeduniqueids).length === 0) {
            fetchUpdateDeviceCache(this, undefined, populatedevicelist);
        } else {
            populatedevicelist();
        }
    };

    function callinitcallbacks(thsq) {

        var callbacks = thsq.initcallbacks;
        thsq.initcallbacks = [];
        var i;
        for (i = 0; i < callbacks.length; i += 1) {
            callbacks[i]();
        }
    }
    function convertToUniqueFromId(thsq, id, callback) {

        function getUniqueFromId(thsq, id) {
            var unique;
            for (unique in thsq.claimeduniqueids) {
                if (thsq.claimeduniqueids.hasOwnProperty(unique)) {
                    if (thsq.claimeduniqueids[unique] === id) {
                        return unique;
                    }
                }
            }
            for (unique in thsq.deviceuniqueids) {
                if (thsq.deviceuniqueids.hasOwnProperty(unique)) {
                    if (thsq.deviceuniqueids[unique] === id) {
                        return unique;
                    }
                }
            }
            return id;
        }
        if (thsq.inited) {
            callback(getUniqueFromId(thsq, id));
        } else {
            thsq.initcallbacks.push(function () {
                callback(getUniqueFromId(thsq, id));
            });
        }
    }

    function convertToIdFromUnique(thsq, unique, callback) {
        function getIdFromUnique(thsq, unique) {
            var id;
            id = thsq.claimeduniqueids[unique];
            if (!id) {
                id = thsq.deviceuniqueids[unique];
            }
            if (id) {
                return id;
            } else {
                return unique;
            }
        }

        if (thsq.inited) {
            callback(getIdFromUnique(thsq, unique));
        } else {
            thsq.initcallbacks.push(function () {
                callback(getIdFromUnique(thsq, unique));
            });
        }
    }


    function fetchingDeviceToCache(thsq, id) {
        if (id && thsq.devicesfetching[id] === true) {
            return true;
        }
        if (id === undefined && Object.keys(thsq.devicesfetching).length > 0) {
            return true;
        }
        return false;
    }

    function fetchDeviceToCache(thsq, id, callback) {
        var unique;
        if (fetchingDeviceToCache(thsq, id)) {
            callback();
            return;
        }
        thsq.devicesfetching[id] = true;

        fetch(thsq, 'device-cache', {
            url: thsq.host + '/0/devices/' + id,
            success: function (e) {
                var device;
                delete thsq.devicesfetching[id];
                if (e) {
                    try {
                        device = JSON.parse(e);
                    } catch (ignored) { }
                    if (deviceunique(device)) {
                        unique = deviceunique(device);
                        updateDeviceUnique(thsq, unique, id);
                        if (device.d === undefined) {
                            device.d = {};
                        }
                        if (device.s === undefined) {
                            device.s = {};
                        }

                        if (thsq.claimeduniqueids[unique]) {
                            var diff = updateDeviceCache(thsq, unique, device);
                            if (JSON.stringify(diff) !== JSON.stringify({ meta: {}, d: {}, s: {}})) {
                                thsq.emit('device-updated', device, unique, diff);
                            }
                        }

                        callback(device);
                    } else {
                        //log('error ' + err);
                        callback();
                    }
                } else {
                    callback();
                }
            },
            error: function (e) {
                delete thsq.devicesfetching[id];
                convertToUniqueFromId(thsq, id, function (unique) {
                    if (unique && thsq.devicecache[unique]) {
                        if (e === 'timeout') {
                            callback(thsq.devicecache[unique].device, e);
                        } else {
                            delete thsq.devicecache[unique];
                            callback(undefined, e);
                        }
                    } else {
                        callback(undefined, e);
                    }
                });
            }
        });
    }

    function updateDeviceCache(thsq, unique, device) {
        var diff, v, d, t;

        diff = { meta: {}, d: {}, s: {} };
        if (device) {
            if (thsq.devicecache[unique]) {
                d = thsq.devicecache[unique].device;
                for (t in diff) {
                    for (v in device[t]) {
                        if (d[t] === undefined) {
                            d[t] = {};
                        }
                        if (device[t][v] && JSON.stringify(device[t][v]) !== JSON.stringify(d[t][v])) {
                            var field;
                            for (field in device[t][v]) {
                                if (d[t][v] !== undefined) {
                                    if (JSON.stringify(device[t][v][field]) !== JSON.stringify(d[t][v][field])) {
                                        if (diff[t][v] === undefined) {
                                            diff[t][v] = {};
                                        }
                                        diff[t][v][field] = clone(device[t][v][field]);
                                    }
                                } else {
                                    diff[t][v] = clone(device[t][v]);
                                }
                            }
                        }
                    }
                }
            } else {
                diff = device;
            }
            if (device.d === undefined) {
                device.d = {};
            }
            if (device.s === undefined) {
                device.s = {};
            }
            thsq.devicecache[unique] = { device: clone(device) };
        } else {
            if (thsq.claimeduniqueids[unique] === undefined) {
                delete thsq.devicecache[unique];
            }
        }
        return diff;
    }

    function addDeltaToDeviceCache(thsq, unique, delta) {
        var device, newdevice, diff, t, v;

        diff = { meta: {}, d: {}, s: {} };
        if (thsq.devicecache[unique]) {
            device = thsq.devicecache[unique].device;
            newdevice = clone(device);
            for (t in diff) {
                for (v in delta[t]) {
                    if (device[t] === undefined) {
                        device[t] = {};
                    }
                    if (newdevice[t] === undefined) {
                        newdevice[t] = {};
                    }

                    if (device[t][v] === undefined) {
                        diff[t][v] = clone(delta[t][v]);
                    } else {
                        var field;
                        for (field in delta[t][v]) {
                            if (JSON.stringify(device[t][v][field]) !== JSON.stringify(delta[t][v][field])) {
                                if (diff[t][v] === undefined) {
                                    diff[t][v] = {};
                                }
                                diff[t][v][field] = clone(delta[t][v][field]);
                            }
                        }
                    }
                    newdevice[t][v] = clone(delta[t][v]);
                }
            }
        } else {
            newdevice = clone(delta);
        }
        if (newdevice) {
            if (newdevice.d === undefined) {
                newdevice.d = {};
            }
            if (newdevice.s === undefined) {
                newdevice.s = {};
            }
        }

        thsq.devicecache[unique] = { device: newdevice };
        return diff;
    }

    var fetchDevicelistqueue = [];
    function fetchDevicelist(thsq, callback) {
        var callcallbacks = function (list) {
            var i;
            var callbacks = fetchDevicelistqueue;
            fetchDevicelistqueue = [];
            for (i = 0; i < callbacks.length; i += 1) {
                callbacks[i](list);
            }
        };

        fetchDevicelistqueue.push(callback);

        if (fetchDevicelistqueue.length > 1) {
            return;
        }
        fetch(thsq, 'device', {
            url: thsq.host + '/0/devices/',
            success: function (e) {
                var list;
                try {
                    list = JSON.parse(e);
                } catch (ignored) {
                }
                if (list) {
                    callcallbacks(list);
                } else {
                    callcallbacks();
                }
            },
            error: function () {
                callcallbacks();
            }
        });
    }

    function updateDeviceUnique(thsq, unique, id) {
        thsq.deviceuniqueids[unique] = id;
    }
    function fetchUpdateDeviceCache(thsq, unique, callback) {
        var device;
        if (unique === undefined) {
            fetchDevicelist(thsq, function (devices) {
                var d;
                thsq.claimeduniqueids = {};
                for (d in devices) {
                    if (devices.hasOwnProperty(d)) {
                        unique = deviceunique(devices[d]);
                        devices[d].id = d;
                        updateDeviceCache(thsq, unique, devices[d]);
                        thsq.claimeduniqueids[unique] = d;
                    }
                }
                callback();
            });
            return;
        }
        convertToIdFromUnique(thsq, unique, function (id) {
            fetch(thsq, 'device-cache', {
                url: thsq.host + '/0/devices/' + id,
                success: function (e) {
                    if (e) {
                        try {
                            device = JSON.parse(e);
                        } catch (ignored) { }
                        if (device && e !== '{}') {
                            device.id = id;
                            unique = deviceunique(device);
                            updateDeviceUnique(thsq, unique, id);
                            updateDeviceCache(thsq, unique, device);
                            callback(device, unique);
                        } else {
                            updateDeviceCache(thsq, unique);
                            callback();
                        }
                    } else {
                        updateDeviceCache(thsq, unique);
                        callback();
                    }
                },
                error: function () {
                    updateDeviceCache(thsq, unique);
                    callback();
                }
            });
        });
    }

    Thsq.prototype.getDevice = function (id, callback) {
        var _this = this;
        convertToUniqueFromId(this, id, function (unique) {
            if (unique === undefined || unique === '') {
                callback();
            } else if (_this.claimeduniqueids[unique] && _this.devicecache[unique] && _this.devicecache[unique].device) {
                callback(_this.devicecache[unique].device, unique);
            } else {
                fetchUpdateDeviceCache(_this, unique, callback);
            }
        });
    };

    function getDeviceDataHistory(thsq, unique, type, name, num, from, startid, callback) {
        convertToIdFromUnique(thsq, unique, function (id) {
            fetch(thsq, 'device', {
                url: thsq.host + '/0/devices/' + id + '/' + type + '/' + name,
                data: {
                    latest: num,
                    from: from,
                    startid: startid
                },
                success: function (e) {
                    var list, i;
                    if (e) {
                        list = JSON.parse(e);
                        // For backwards compatibility
                        for (i = 0; i < list.length; i += 1) {
                            if (list[i].timestamp && !list[i].time) {
                                list[i].time = list[i].timestamp;
                            }
                        }
                        callback(list);
                    } else {
                        callback([]);
                    }
                },
                error: function () {
                    callback();
                }
            });
        });
    }

    function getDeviceDataHistoryForward(thsq, unique, type, name, num, startid, callback) {
        /* Fetch history starting at given id, going forward. Sort by id.
         * TODO Add support for num > chunksize */
        getDeviceDataHistory(thsq, unique, type, name, num, undefined, startid, function (data) {
            if (data !== undefined && Array.isArray(data)) {
                data = data.sort(function (a, b) {
                    return b.id - a.id;
                });
                callback(data);
            } else {
                callback();
            }
        });
    }

    function getDeviceDataHistoryBackwards(thsq, unique, type, name, chunksize, until, callback) {
        /* fetches more and more data while calling until() repeatedly.
         * when no more data is needed, until() returns true. */
        var data = [];
        if (typeof until !== 'function') {
            callback();
            return;
        }

        var getmore = function (id) {
            if (until(data)) {
                data = data.sort(function (a, b) {
                    return b.id - a.id;
                });
                callback(data);
                return;
            }

            getDeviceDataHistory(thsq, unique, type, name, chunksize, id, undefined, function (datachunk) {
                if (datachunk === undefined || !Array.isArray(datachunk)) {
                    callback();
                    return;
                }

                data = data.concat(datachunk);
                data = data.sort(function (a, b) {
                    return b.id - a.id;
                });
                if (datachunk.length === 0) {
                    /* No more data to fetch */
                    callback(data);
                } else {
                    getmore(datachunk[datachunk.length - 1].id);
                }
            });
        };
        getmore();
    }

    Thsq.prototype.getVariableHistory = function (id, type, name, options, callback) {
        var _this = this;
        convertToUniqueFromId(this, id, function (unique) {

            /* fetch from most recent value going backwards, options: num, chunksize */
            /* fetch from given id going forward, options: startid, num */
            /* fetch elements in given time interval, options: starttime, endtime, chunksize */

            if (typeof options === 'function') {
                callback = options;
                options = {};
            }
            if (!options) {
                options = {};
            }
            if (options.num === undefined) {
                options.num = 1000;
            }
            if (!options.chunksize) {
                options.chunksize = 1000;
            }

            if (options.startid !== undefined) {
                /* Fetch history elements starting at given options.startid and going forward in time. */
                getDeviceDataHistoryForward(thsq, unique, type, name, options.num, options.startid, callback);
                return;
            }

            if (options.starttime !== undefined || options.endtime !== undefined) {
                /* Fetch history elements in given time interval */
                if (options.endtime === undefined) {
                    options.endtime = new Date().getTime();
                }
                if (options.endtime < options.starttime) {
                    /* Error: sanity-check time interval options */
                    callback();
                    return;
                }
                var gotenoughdates = function(data) {
                    if (data.length > 0) {
                        if (typeof options.progress === 'function') {
                            options.progress(data.length, unique, data[data.length - 1]);
                        }
                        return (data[0].time < options.starttime ||
                            data[data.length - 1].time < options.starttime);
                    }
                };
                getDeviceDataHistoryBackwards(thsq, unique, type, name, options.chunksize, gotenoughdates, function(data) {
                    if (!data || !Array.isArray(data)) {
                        callback();
                        return;
                    }
                    data = data.sort(function (a, b) {
                        return b.id - a.id;
                    });
                    data = data.filter(function (d) {
                        return (d.time >= options.starttime && d.time <= options.endtime);
                    });
                    callback(data);
                });
            } else {
                /* Fetch history starting at given time, going backwards. Sort by id. */
                var gotenoughelements = function(data) {
                    if (typeof options.progress === 'function') {
                        options.progress(data.length, unique, data[data.length - 1]);
                    }
                    return data.length >= options.num;
                };
                if (options.num && options.chunksize && options.num < options.chunksize) {
                    options.chunksize = options.num;
                }
                getDeviceDataHistoryBackwards(thsq, unique, type, name, options.chunksize, gotenoughelements, function(data) {
                    if (!data || !Array.isArray(data)) {
                        callback();
                        return;
                    }
                    data = data.sort(function (a, b) {
                        return b.id - a.id;
                    });
                    if (data.length > options.num) {
                        data.splice(options.num);
                    }
                    callback(data);
                });
            }
        });
    };

    Thsq.prototype.deleteDeviceHistory = function (unique, callback) {
        var _this = this;
        convertToIdFromUnique(this, unique, function (deviceid) {
            fetch(_this, 'device', {
                url: _this.host + '/0/devices/' + deviceid + '/fuglyhistory',
                method: 'DELETE',
                success: function (e) {
                    if (typeof callback === 'function') {
                        callback(e);
                    }
                },
                error: function () {
                    if (typeof callback === 'function') {
                        callback();
                    }
                }
            });
        });
    };

    Thsq.prototype.deleteDeviceCommands = function (unique, command, callback) {
        var _this = this;
        convertToIdFromUnique(this, unique, function (deviceid) {
            fetch(_this, 'device', {
                url: _this.host + '/0/devices/' + deviceid + '/' + command,
                method: 'DELETE',
                success: function (e) {
                    if (typeof callback === 'function') {
                        callback(e);
                    }
                },
                error: function () {
                    if (typeof callback === 'function') {
                        callback();
                    }
                }
            });
        });
    };

    Thsq.prototype.getNotifications = function (callback) {
        var _this = this;
        fetch(_this, 'user', {
            url: _this.host + '/0/user/event/',
            success: function (e) {
                if (e) {
                    callback(JSON.parse(e));
                } else {
                    callback();
                }
            },
            error: function () {
                callback();
            }
        });
    };

    Thsq.prototype.addNotification = function (unique, name, message, trigger, callback) {
        var _this = this;
        convertToIdFromUnique(this, unique, function (deviceid) {
            fetch(_this, 'user', {
                url: _this.host + '/0/user/event/',
                method: 'POST',
                data: {
                    name: name,
                    message: message,
                    trigger: trigger,
                    deviceid: deviceid
                },
                success: function (data) {
                    if (typeof callback === 'function') {
                        callback(data);
                    }
                },
                error: function (data) {
                    if (typeof callback === 'function') {
                        callback(data);
                    }
                }
            });
        });
    };

    Thsq.prototype.updateNotification = function (id, unique, name, message, trigger, callback) {
        var _this = this;
        convertToIdFromUnique(this, unique, function (id) {
            fetch(_this, 'user', {
                url: _this.host + '/0/user/event/' + id,
                method: 'POST',
                data: {
                    name: name,
                    message: message,
                    trigger: trigger,
                    deviceid: deviceid
                },
                success: function (data) {
                    if (typeof callback === 'function') {
                        callback(data);
                    }
                },
                error: function (data) {
                    if (typeof callback === 'function') {
                        callback(data);
                    }
                }
            });
        });
    };

    Thsq.prototype.getNotification = function (id, callback) {
        var _this = this;
        fetch(_this, 'user', {
            url: _this.host + '/0/user/event/' + id,
            method: 'GET',
            success: function (data) {
                callback(JSON.parse(data));
            },
            error: function (data) {
                callback(data);
            }
        });
    };


    Thsq.prototype.testNotification = function (id, callback) {
        var _this = this;
        fetch(_this, 'user', {
            url: _this.host + '/0/user/event/' + id,
            method: 'POST',
            success: function (data) {
                if (typeof callback === 'function') {
                    callback(data);
                }
            },
            error: function (data) {
                if (typeof callback === 'function') {
                    callback(data);
                }
            }
        });
    };

    Thsq.prototype.removeNotification = function (id, callback) {
        var _this = this;
        fetch(_this, 'user', {
            url: _this.host + '/0/user/event/' + id,
            method: 'DELETE',
            success: function (data) {
                if (typeof callback === 'function') {
                    callback(data);
                }
            },
            error: function (data) {
                if (typeof callback === 'function') {
                    callback(data);
                }
            }
        });
    };

    Thsq.prototype.getEvents = function (num, callback) {
        var _this = this;
        fetch(_this, 'user', {
            url: _this.host + '/0/user/events/',
            data: {
                latest: num,
            },
            success: function (e) {
                if (e) {
                    callback(JSON.parse(e));
                } else {
                    callback();
                }
            },
            error: function () {
                callback();
            }
        });
    };


    Thsq.prototype.userSignup = function (username, password, callback) {
        var _this = this;
        fetch(_this, 'user', {
            url: _this.host + '/0/session/signup',
            method: 'POST',
            data: {
                login: username,
                password: password,
            },
            success: function (data) {
                _this.disconnect();
                _this.reconnect();
                if (typeof callback === 'function') {
                    callback(data);
                }
            },
            error: function () {
                _this.disconnect();
                _this.reconnect();
                if (typeof callback === 'function') {
                    callback();
                }
            }
        });
    };

    Thsq.prototype.userResendConfirmationEmail = function (callback) {
        var _this = this;
        fetch(_this, 'user', {
            url: _this.host + '/0/session/resend',
            method: 'POST',
            success: function (e) {
                if (typeof callback === 'function') {
                    callback(e);
                }
            },
            error: function () {
                if (typeof callback === 'function') {
                    callback();
                }
            }
        });
    };

    Thsq.prototype.userSendPasswordRecoveryEmail = function (username, callback) {
        var _this = this;
        fetch(_this, 'user', {
            url: _this.host + '/0/session/recover',
            method: 'POST',
            data: { login: username },
            success: function (e) {
                if (typeof callback === 'function') {
                    callback(e);
                }
            },
            error: function () {
                if (typeof callback === 'function') {
                    callback();
                }
            }
        });
    };

    Thsq.prototype.createAccessToken = function (callback) {
        var _this = this;
        fetch(_this, 'user', {
            url: _this.host + '/0/user/accesstoken',
            method: 'POST',
            success: function (e) {
                if (typeof callback === 'function') {
                    callback(e);
                }
            },
            error: function () {
                if (typeof callback === 'function') {
                    callback();
                }
            }
        });
    };

    Thsq.prototype.deleteAccessToken = function (token, callback) {
        var _this = this;
        fetch(_this, 'user', {
            url: _this.host + '/0/user/accesstoken/' + token,
            method: 'DELETE',
            success: function (e) {
                if (typeof callback === 'function') {
                    callback(e);
                }
            },
            error: function () {
                if (typeof callback === 'function') {
                    callback();
                }
            }
        });
    };

    Thsq.prototype.recoverNewPassword = function (username, token, password, callback) {
        var _this = this;
        fetch(_this, 'user', {
            url: _this.host + '/0/session/recover',
            method: 'POST',
            data: { login: username, token: token, password: password },
            success: function (e) {
                if (typeof callback === 'function') {
                    callback(e);
                }
            },
            error: function () {
                if (typeof callback === 'function') {
                    callback();
                }
            }
        });
    };

    Thsq.prototype.getVariable = function (id, type, variable, callback) {
        var _this = this;
        convertToUniqueFromId(this, id, function (unique) {
            if (type !== 's' && type !== 'd' && type !== 'meta') {
                if (typeof callback === 'function') {
                    callback();
                }
                return;
            }
            if (_this.devicecache[unique] === undefined || _this.devicecache[unique].device === undefined) {
                if (typeof callback === 'function') {
                    callback();
                }
                return;
            }
            if (_this.devicecache[unique].device[type] === undefined) {
                if (typeof callback === 'function') {
                    callback();
                }
                return;
            }
            if (typeof callback === 'function') {
                callback(_this.devicecache[unique].device[type][variable]);
            }
            return _this.devicecache[unique].device[type][variable];
        });
    };

    Thsq.prototype.getVariableValue = function (id, type, variable, fallback, callback) {
        this.getVariable(id, type, variable, function(value) {
            if (value) {
                if (value.value !== undefined) {
                    if (typeof Buffer !== 'undefined' && value.value.data && value.value.type === 'Buffer') { // node.js
                        callback(Buffer.from(value.value.data), value);
                    } else {
                        callback(value.value, value);
                    }
                } else {
                    callback(fallback, value);
                }
            } else {
                callback(fallback);
            }
        });
    };


    Thsq.prototype.getVariableStringValue = function (id, type, variable, fallback, callback) {
        function tostring(val) {
            if (typeof val === 'string') {
                return val;
            }
            if (typeof Buffer !== 'undefined') { // node.js
                return Buffer(val).toString();
            }
            if (val.data) { // browser
                return String.fromCharCode.apply(null, val.data);
            }
            return '';
        }
        thsq.getVariableValue(id, type, variable, fallback, function (value, variable) {
            callback(tostring(value), variable);
        });
    };


    Thsq.prototype.getVariableBufferValue = function (id, type, variable, fallback, callback) {
        thsq.getVariableValue(id, type, variable, fallback, function (value, variable) {
            callback(Buffer.from(value), variable);
        });
    };


    Thsq.prototype.getVariableNumberValue = function (id, type, variable, fallback, callback) {
        thsq.getVariableValue(id, type, variable, fallback, function (value, variable) {
            if (Number.isNaN(Number(value))) {
                callback(Number(fallback), variable);
            } else {
                callback(Number(value), variable);
            }
        });
    };

    Thsq.prototype.deleteVariable = function (unique, type, variable, callback) {
        var _this;

        if (type !== 's' && type !== 'd') {
            callback();
            return;
        }

        _this = this;

        // Update cache directly
        var diff;
        diff = {};
        diff[type] = {};
        diff[type][variable] = { value: undefined, time: new Date().getTime() };
        var device = getDeviceFromCache(_this, unique);
        if (device) {
            if (device[type][variable]) {
                if (device[type][variable].value === undefined) {
                    /* We have previously deleted this value, so we should delete the entire variable info now */
                    diff[type][variable] = undefined;
                } else {
                    /* Value is not deleted, so we should only delete the value */
                }
            }
        }
        addDeltaToDeviceCache(_this, unique, diff);


        convertToIdFromUnique(this, unique, function (id) {
            fetch(_this, 'device', {
                url: _this.host + '/0/devices/' + id + '/' + type + '/' + variable,
                method: 'DELETE',
                success: function (e) {
                    if (e === 'delete-ok') {
                        if (typeof callback === 'function') {
                            callback(e);
                        }
                    } else {
                        if (typeof callback === 'function') {
                            callback(e);
                        }
                    }
                },
                error: function (e) {
                    if (typeof callback === 'function') {
                        callback(e);
                    }
                }
            });
        });
    };

    function isAscii(str) {
        return /^[\x20-\x7f]*$/.test(str);
    }

    Thsq.prototype.getDeviceRssi = function (unique) {
        if (unique !== undefined) {
            return this.nearbydevicesrssi[unique];
        }
    };

    Thsq.prototype.setVariable = function (unique, type, variable, val, options, callback) {
        var _this, value, value64, postdata;

        if (options === undefined) {
            options = {};
        }
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }

        _this = this;

        if (type !== 's' && type !== 'd') {
            if (typeof callback === 'function') {
                callback();
            }
            return;
        }

        convertToIdFromUnique(this, unique, function (id) {
            value = val;

            postdata = { value: value };

            var time = new Date().getTime();
            if (options.timestamp !== undefined) {
                time = postdata.timestamp = options.timestamp;
            }

            // Update cache directly
            if (value !== undefined) {
                var diff;
                diff = {};
                diff[type] = {};
                diff[type][variable] = { value: value, time: time };
                addDeltaToDeviceCache(_this, unique, diff);
            }

            fetch(_this, 'device', {
                url: _this.host + '/0/devices/' + id + '/' + type +'/' + variable,
                method: 'POST',
                data: postdata,
                success: function (e) {
                    if (e === 'device-ok') {
                        if (typeof callback === 'function') {
                            callback(e);
                        }
                    } else {
                        if (typeof callback === 'function') {
                            callback(e);
                        }
                    }
                },
                error: function () {
                    if (typeof callback === 'function') {
                        callback();
                    }
                }
            });
        });
    };

    Thsq.prototype.clearHistoryListener = function (token) {
        var _this = this;

        Object.keys(this.historylisteners).map(function (key) {
            var arr = _this.historylisteners[key];
            if (_this.historylisteners[key]) {
                _this.historylisteners[key] = _this.historylisteners[key].filter(function (l) {
                     return l.token !== token;
                });
            }
        });
    }

    Thsq.prototype.clearAllHistoryListeners = function () {
        this.historylisteners = {};
    }

    Thsq.prototype.addHistoryListener = function (unique, type, name, options, listener) {
        var _this = this;

        var l = {
            unique: unique,
            type: type,
            name: name,
            options: options,
            listener: listener,
            token: Math.random().toString(36),
            key: unique + '-' + type + '-' + name,
            count: 0,
        };
        if (!l.options) {
            l.options = {};
        }
        if (l.options.num === undefined) {
            l.options.num = 1000;
        }

        if (!_this.historylisteners[l.key]) {
            _this.historylisteners[l.key] = [];
        }
        _this.historylisteners[l.key].push(l);

        thsq.getDevice(unique, function (device) {
            if (device[type] && device[type][name]) {
                _this.historylisteners[l.key].seq = device[type][name].seq;
            }
        });

        if (options.num > 0) {
            fetchpartialhistory(thsq, l);
        }

        return l.token;
    }


    Thsq.prototype.sendCommand = function (unique, command, options, callback) {
        var _this, data;
        var commandoptions = {};
        _this = this;

        if (typeof options === 'function') {
            callback = options;
            options = {};
        }

        if (options === undefined) {
            options = {};
        }

        var sendcommand = function (callback) {
            convertToIdFromUnique(_this, unique, function (id) {

                data = { command: command };

                Object.keys(commandoptions).map(function (v, i) {
                    data[v] = commandoptions[v];
                });

                fetch(_this, 'device', {
                    url: _this.host + '/0/devices/' + id + '/',
                    data: data,
                    method: 'POST',
                    success: function (e) {
                        if (typeof callback === 'function') {
                            callback(e);
                        }
                    },
                    error: function () {
                        if (typeof callback === 'function') {
                            callback();
                        }
                    }
                });
            });
        };

        var commandid;

        if (options.sendcallback === undefined) {
            options.sendcallback = function () {
            };
        }
        if (options.ackedcallback === undefined) {
            options.ackedcallback = function () {
            };
        }
        if (options.sendtimeoutcallback === undefined) {
            options.sendtimeoutcallback = function () {
            };
        }
        if (options.ackedtimeoutcallback === undefined) {
            options.ackedtimeoutcallback = function () {
            };
        }
        if (options.ackedtimeout === undefined) {
            options.ackedtimeout = 10000;
        }
        if (options.sendtimeout === undefined) {
            options.sendtimeout = 60000;
        }

        commandoptions.priority = options.priority;

        var cleanup = function () {
            thsq.off('device-updated', deviceupdated);
            clearTimeout(ackedtimeoutid);
            clearTimeout(sendtimeoutid);
        };

        var ackedtimeoutid;
        var sendtimeoutid;

        sendtimeoutid = setTimeout(function () {
            options.sendtimeoutcallback();
            options.ackedtimeoutcallback();
            cleanup();
        }, options.sendtimeout);


        var wassentcalled = false;
        var wasackedcalled = false;

        var wassent = function () {
            if (wassentcalled === false) {
                wassentcalled = true;
                options.sendcallback();
                clearTimeout(sendtimeoutid);
                ackedtimeoutid = setTimeout(function () {
                    options.ackedtimeoutcallback();
                    cleanup();
                }, options.ackedtimeout);
            }
        };

        var wasacked = function () {
            if (wasackedcalled === false) {
                wasackedcalled = true;
                options.ackedcallback();
                cleanup();
            }
        };

        var deviceupdated = function (device, u, update) {
            if (u === unique) {

                var commands, i;

                commands = JSON.parse(thsq.variablevaluestring(device, 'meta', 'command-sent-recent', '[]'));
                for (i = 0; i < commands.length; i += 1) {
                    if (commands[i].cid.indexOf(commandid) !== -1) {
                        wassent();
                    }
                }
                commands = JSON.parse(thsq.variablevaluestring(device, 'meta', 'command-acked-recent', '[]'));
                for (i = 0; i < commands.length; i += 1) {
                    if (commands[i].cid.indexOf(commandid) !== -1) {
                        wassent();
                        wasacked();
                    }
                }
            }
        };
        sendcommand(function (id) {
            commandid = id;
            thsq.on('device-updated', deviceupdated);
            if (typeof callback === 'function') {
                if (id) {
                    callback('device-ok');
                } else {
                    callback();
                }
            }
        });
    };
    Thsq.prototype.storeUserData = function (data, callback) {
        var _this = this;
        fetch(_this, 'user', {
            url: _this.host + '/0/user/',
            method: 'POST',
            data: data,
            success: function () {
                if (typeof callback === 'function') {
                    callback();
                }
            },
            error: function () {
                if (typeof callback === 'function') {
                    callback();
                }
            }
        });
    };


    Thsq.prototype.scanBLE = function (milliseconds) {
        var message, host, port;

        /* Android */
        if (typeof AndroidBLEListener !== 'undefined') {
            AndroidBLEListener.scanLeDevice(milliseconds);
        }

        /* iOS */
        if (typeof window !== 'undefined' &&
                window.webkit &&
                window.webkit.messageHandlers &&
                window.webkit.messageHandlers.javascriptBridge &&
                window.webkit.messageHandlers.javascriptBridge.postMessage &&
                typeof window.webkit.messageHandlers.javascriptBridge.postMessage === 'function') {
                message = { 'BLEProximityUUID': '5d813fd4-fe87-450b-9473-da262973d4c4', 'BLEIdentifier': 'THSQ', 'BLEListenPeriod': milliseconds};
            window.webkit.messageHandlers.javascriptBridge.postMessage(message);
        }
    };

    if (typeof window !== 'undefined') {
        var appWindow, appOrigin;

        window.addEventListener('message', function (e) {
            appWindow = e.source;
            appOrigin = e.origin;
        });
    }

    function sendudp(ipaddr, port, msg) {
        var message;
        /* iOS */
        if (typeof window !== 'undefined' &&
                window.webkit &&
                window.webkit.messageHandlers &&
                window.webkit.messageHandlers.javascriptBridge &&
                window.webkit.messageHandlers.javascriptBridge.postMessage &&
                typeof window.webkit.messageHandlers.javascriptBridge.postMessage === 'function') {
                message = { 'udpHost': ipaddr, 'udpPort': port, 'udpMsg': msg };
            window.webkit.messageHandlers.javascriptBridge.postMessage(message);
        }
        if (typeof AndroidUDPSender !== 'undefined') {
            AndroidUDPSender.send(ipaddr, port, msg);
        }
        if (appWindow && appOrigin) {
            message = {
                'udpHost' : ipaddr,
                'udpPort' : port,
                'data' : msg
            };
            appWindow.postMessage(JSON.stringify(message), appOrigin);
        }
    }
    var sendudpinterval;

    function scanForNetworkDevice (addr, authcode) {
        sendudp(addr, 590, authcode);
    }

    Thsq.prototype.scanForNetworkDevice = function (addr, authcode) {
        scanForNetworkDevice(addr, authcode);
    };

    var getuserqueue = [];
    Thsq.prototype.getUser = function (callback) {
        var _this = this;
        getuserqueue.push(callback);
        if (getuserqueue.length > 1) {
            return;
        }
        fetch(_this, 'user', {
            url: _this.host + '/0/user/',
            success: function (jsondata, status, xhr) {
                var data;
                if (!jsondata || jsondata === "undefined") {
                    jsondata = "{}";
                }

                data = JSON.parse(jsondata);
                if (data.authcode) {
                    scanForNetworkDevice('224.0.0.1', data.authcode);
                    scanForNetworkDevice('broadcast', data.authcode);
                    if (sendudpinterval) {
                        clearInterval(sendudpinterval);
                    }
                    if (_this.sendudpinterval) {
                        clearInterval(_this.sendudpinterval);
                    }
                    _this.sendudpinterval = setInterval(function () {
                        scanForNetworkDevice('224.0.0.1', data.authcode);
                        scanForNetworkDevice('broadcast', data.authcode);
                    }, 5000);
                }
                var i;
                var callbacks = getuserqueue;
                getuserqueue = [];
                for (i = 0; i < callbacks.length; i += 1) {
                    callbacks[i](data);
                }
            },
            error: function (xhr, status) {
                var callbacks = getuserqueue;
                var i;
                getuserqueue = [];
                for (i = 0; i < callbacks.length; i += 1) {
                    callbacks[i]();
                }
            }
        });
    };

    Thsq.prototype.getNetworkDevices = function (callback) {
        var _this = this;
        fetch(_this, 'device', {
            url: _this.host + '/0/network/',
            success: function (jsondata) {
                var d, unique;
                var devices = JSON.parse(jsondata);
                for (d in devices) {
                    if (deviceunique(devices[d])) {
                        unique = deviceunique(devices[d]);
                        updateDeviceUnique(_this, unique, d);
                    }
                    if (devices[d].d === undefined) {
                        devices[d].d = {};
                    }
                    if (devices[d].s === undefined) {
                        devices[d].s = {};
                    }
                }
                callback(devices);
            },
            error: function () {
                callback();
            }
        });
    };

    function deviceidstring(devicedata, str) {
        var r;
        if (devicedata && devicedata.s && devicedata.s.id) {
            r = devicedata.s.id.value.split(',').filter(function (e) { return e.split(':')[0] === str; });
            if (r.length > 0) {
                return r[0].split(':')[1];
            }
        }
    }

    function deviceidvalue(devicedata, val) {
        var eui;
        eui = deviceidstring(devicedata, val);
        if (!eui) {
            if (devicedata && devicedata.s && devicedata.s[val]) {
                eui = devicedata.s[val].value;
            }
        }
        return eui;
    }

    Thsq.prototype.deviceEUI = function (devicedata) {
        var eui;
        eui = deviceidstring(devicedata, 'eui');
        if (!eui) {
            if (devicedata.s.eui) {
                eui = devicedata.s.eui.value;
            }
        }
        return eui;
    };

    Thsq.prototype.devicePlatform = function (devicedata) {
        var platform;
        platform = deviceidstring(devicedata, 'platform');
        if (!platform) {
            if (devicedata && devicedata.s && devicedata.s.platform) {
                platform = devicedata.s.platform.value;
            }
        }
        return platform;
    };

    Thsq.prototype.deviceId = function (unique, callback) {
        convertToIdFromUnique(this, unique, callback);
    };

    Thsq.prototype.parseBinarySchedule = function (binaryschedule) {
        var events = [];
        var event;
        var i, d;
        var days, hour, minute, dimlevels;

        if (binaryschedule) {
            for (i = 0; i < binaryschedule.length; i += 7) {
                if (binaryschedule[i + 0] === 119) {
                    days = [];
                    for (d = 0; d < 7; d += 1) {
                        if ((binaryschedule[i + 1] & (1 << d)) !== 0) {
                            days.push(d);
                        }
                    }
                    event = {
                        days: days,
                        time: { hour: binaryschedule[i + 2],
                            minute: binaryschedule[i + 3] },
                            intensity: [ binaryschedule[i + 4],
                            binaryschedule[i + 5],
                            binaryschedule[i + 6] ]
                    };
                }
                events.push(event);
            }
            events = events.sort(function (a, b) {
                return a.time.hour * 60 + a.time.minute - (b.time.hour * 60 + b.time.minute);
            });
        }
        return events;
    };

    Thsq.prototype.compileBinarySchedule = function (events) {
        var i, j, compiledlist, compiled, binary;


        function compile(event) {
            var schedule, k, daybits;

            daybits = 0;

            for (k = 0; k < event.days.length; k += 1) {
                daybits |= (1 << event.days[k]);
            }

            schedule = new Uint8Array(7);
            schedule[0] = 119;
            schedule[1] = daybits;
            schedule[2] = event.time.hour;
            schedule[3] = event.time.minute;
            schedule[4] = event.intensity[0];
            schedule[5] = event.intensity[1];
            schedule[6] = event.intensity[2];

            return schedule;

        }
        if (events.length > 8) {
            throw new Error('Too long schedule (must be maximum 8)');
        }

        compiledlist = [];
        for (i = 0; i < events.length; i += 1) {
            compiledlist.push(compile(events[i]));
        }

        compiled = new Uint8Array(7 * compiledlist.length);
        for (i = 0; i < compiledlist.length; i += 1) {
            for (j = 0; j < 7; j += 1) {
                compiled[i * 7 + j] = compiledlist[i][j];
            }
        }
        return compiled;
    };

    function fetchpartialhistory(thsq, l) {
        var _this = thsq;

        if (l.fetching) {
            /* Already fetching history, ignore request */
            return;
        }
        l.fetching = true;

        function maybefetchagain(reason) {
            /* Check if there's more data to be fetched, when compared to
             * the latest timestamp provided by the device data. This can be
             * motivated by a very large amount of data added to the history
             * recently that has to be chunked, or that the history was not
             * ready to be fetched previously. */
            if (reason === 'fetchfailed') {
                /* Previous fetch request failed. Perhaps we cannot reach the server.
                 * Instead of trying again, we give up and await a device list or device
                 * event to trigger a new fetch of the remaining history. */
                return;
            }

            _this.getDevice(l.unique, function(device) {
                if (device && device[l.type] && device[l.type][l.name]) {
                    if (device[l.type][l.name].time > l.timestamp) {
                        fetchpartialhistory(_this, l);
                    }
                }
            });
        }

        if (l.options.startid !== undefined) {
            /* startid has highest priority */
        } else if (l.options.starttime !== undefined) {
            /* if no startid, we will fetch data to given start time */
        } else if (l.options.num !== undefined) {
            /* fallback to number of elements */
        }
        var options = l.options;
        if (l.options.num === undefined || l.options.num === 0) {
            options.num = 1000;
        }

        _this.getVariableHistory(l.unique, l.type, l.name, options, function(data) {
            var d, device;

            l.fetching = false;

            if (!data || !Array.isArray(data)) {
                /* Error */
                maybefetchagain('fetchfailed');
                return;
            }

            if (_this.devicecache[l.unique]) {
                device = clone(_this.devicecache[l.unique].device);
            } else {
                device = undefined;
            }

            if (data.length === 0) {
                //l.listener(device, l.unique, l.type, l.name, undefined);
                return;
            }

            /* Sort by id */
            data = data.sort(function (a, b) {
                return a.id - b.id;
            });

            var num = 0;
            for (d in data) {
                if (num < l.seqnosskipped) {
                    /* Already seen */
                } else if (l.options.startid && data[d].id < l.options.startid) {
                    /* Duplicate, ignore */
                } else {
                    if (!l.timestamp || data[d].time > l.timestamp) {
                        l.timestamp = data[d].time;
                    }
                    if (!l.options.startid || data[d].id + 1 > l.options.startid) {
                        l.options.startid = data[d].id + 1;
                    }

                    l.listener(device, l.unique, l.type, l.name, data[d]);
                }
                num++;
            }
            l.seqnosskipped = 0;
            l.count += data.length;

            maybefetchagain('fetchchunk');
        });
    }

    function fetchhistoryifinteresting(thsq, device, unique, diff) {
        var type, name;

        for (type in diff) {
            if (diff.hasOwnProperty(type)) {
                for (name in diff[type]) {
                    if (diff[type].hasOwnProperty(name)) {
                        var key = unique + '-' + type + '-' + name;
                        if (thsq.historylisteners[key]) {
                            var seqdiff = device[type][name].seq - thsq.historylisteners[key].seq;
                            if (seqdiff === 0) {
                                /* We were triggered, but there was no new data. So we'll do nothing. */
                            } else if (seqdiff === 1) {
                                /* We received one more item, so we don't need to fetch any history */
                                device[type][name].timestamp = device[type][name].time;
                                thsq.historylisteners[key].map(function(l) {
                                    l.listener(device, l.unique, l.type, l.name, device[type][name]);
                                    if (l.seqnosskipped === undefined) {
                                        l.seqnosskipped = 0;
                                    }
                                    l.seqnosskipped++;
                                });
                            } else {
                                /* We need to fetch the missing history between the previous and this itme */
                                thsq.historylisteners[key].map(function(l) {
                                    fetchpartialhistory(thsq, l);
                                });
                            }
                            thsq.historylisteners[key].seq = device[type][name].seq;
                        }
                    }
                }
            }
        }
    }

    function update(thsq, message) {
        if (message) {
            var i, data, deviceid, unique, device, diff, delta;
            try {
                if (message.type === 'message') {
                    data = JSON.parse(message.data);
                } else if (message.type === 'utf8') {
                    data = JSON.parse(message.utf8Data);
                } else {
                    return;
                }
            } catch (error) {
                thsq.disconnect();
                return;
            }
            for (i in data) {
                if (data.hasOwnProperty(i)) {
                    if (i === 'devices') {
                        for (deviceid in data.devices) {
                            if (data.devices.hasOwnProperty(deviceid)) {
                                device = data.devices[deviceid];
                                device.id = deviceid;
                                unique = deviceunique(device);
                                diff = updateDeviceCache(thsq, unique, device);
                                thsq.emit('device-updated', device, unique, diff);
                                thsq.claimeduniqueids[unique] = deviceid;
                                fetchhistoryifinteresting(thsq, device, unique, diff);
                            }
                        }
                    } else if (i === 'delta') {
                        for (deviceid in data.delta) {
                            if (data.delta.hasOwnProperty(deviceid)) {
                                delta = data.delta[deviceid];
                                convertToUniqueFromId(thsq, deviceid, function (unique) {
                                    diff = addDeltaToDeviceCache(thsq, unique, delta);
                                    device = clone(thsq.devicecache[unique].device);
                                    device.id = deviceid;
                                    if (delta.d === undefined) {
                                        delta.d = {};
                                    }
                                    if (delta.s === undefined) {
                                        delta.s = {};
                                    }
                                    if (delta.meta === undefined) {
                                        delta.meta = {};
                                    }
                                    thsq.emit('device-updated', device, unique, delta);
                                    thsq.claimeduniqueids[unique] = deviceid;
                                    fetchhistoryifinteresting(thsq, device, unique, delta);
                                });
                            }
                        }
                    } else if (i === 'events') {
                        for (deviceid in data.events) {
                            if (data.events.hasOwnProperty(deviceid)) {
                                if (data.events[deviceid].type === 'device-removed') {
                                    convertToUniqueFromId(thsq, deviceid, function (unique) {
                                        delete thsq.claimeduniqueids[unique];
                                        updateDeviceCache(thsq, unique);
                                        thsq.emit('device-removed', unique);
                                    });
                                } else if (data.events[deviceid].type === 'device-claimed') {
                                    thsq.claimeduniqueids[deviceunique(data.events[deviceid].device)] = deviceid;
                                    addDeltaToDeviceCache(thsq, deviceunique(data.events[deviceid].device),
                                        data.events[deviceid].device);
                                    thsq.emit('device-claimed', data.events[deviceid].device, deviceunique(data.events[deviceid].device));
                                    thsq.emit('device-updated', data.events[deviceid].device, deviceunique(data.events[deviceid].device), data.events[deviceid].device);

                                } else if (data.events[deviceid].type === 'user-event') {
                                    thsq.emit('user-event', data.events[deviceid]);
                                }
                            }
                        }
                    } else {
                    }
                }
            }
        }
    }
    var inittimeout;
    Thsq.prototype.init = function (options, callback) {
        var _this = this;

        if (_this.exiting) {
            /* We are currently executing an exit(), so we wait until we are properly exited before we try to init. */
            clearTimeout(inittimeout);
            inittimeout = setTimeout(function () {
                _this.init(options, callback);
            }, 1000);
            return;
        }

        if (typeof options === 'function') {
            callback = options;
            options = undefined;
        }

        if (!options) {
            options = {};
        }

        if (!_this.historylisteners) {
            _this.historylisteners = {}; /* indexed by unique-type-name */
        }

        if (options.request) {
            /* Overriding request with custom configuration */
            request = options.request;
        }

        _this.exit();
        _this.exited = false;
        _this.options = options;

        this.setServer();

        function deleteconn() {
            var wasconnected = _this.connected;
            _this.connected = false;
            _this.connecting = false;
            if (nodejs) {
                if (_this.connection) {
                    _this.connection.close();
                    if (typeof _this.connection.removeAllListeners === 'function') {
                        _this.connection.removeAllListeners();
                    }
                    delete _this.connection;
                }
                if (_this.socket) {
                    _this.socket.abort();
                    if (typeof _this.socket.removeAllListeners === 'function') {
                        _this.socket.removeAllListeners();
                    }
                    delete _this.socket;
                }
                if (wasconnected) {
                    _this.emit('server-disconnected');
                }
            } else if (browser) {
                if (_this.connection) {
                    delete _this.connection.onopen;
                    delete _this.connection.onerror;
                    delete _this.connection.onclose;
                    delete _this.connection.onmessage;
                    _this.connection.close();
                    delete _this.connection;
                }
                if (wasconnected) {
                    _this.emit('server-disconnected');
                }
            }
        }
        function doping() {
            if (nodejs) {
                if (_this.connection) {
                    _this.connection.ping();
                }
            }
        }

        function doconnect() {
            var protocol, host, parameter;

            if (_this.connected || _this.connecting || _this.exited) {
                return;
            }
            try {
                _this.connecting = true;

                var port = '';
                if ((_this.host && _this.host.split('//')[0] === 'https:') ||
                       (typeof location !== 'undefined' && location.protocol === 'https:')) {
                    protocol = 'wss://';
                    if (typeof location !== 'undefined' && location.port && location.port !== 443) {
                        port = ':' + location.port;
                    }
                } else {
                    protocol = 'ws://';
                    if (typeof location !== 'undefined' && location.port && location.port !== 80) {
                        port = ':' + location.port;
                    }
                }

                if (_this.host) {
                    host = _this.host.split('//')[1];
                } else if (typeof location !== 'undefined') {
                    host = location.hostname;
                }

                if (host.split(':').length === 2) {
                    port = '';
                }
                if (_this.app) {
                    parameter = _this.app;
                } else {
                    parameter = '';
                }

                var sendconnectionopions = function () {
                    _this.connection.send(JSON.stringify({
                        delta: true,
                        throttletime: _this.options.throttletime
                    }));
                };

                var onopen = function () {
                    _this.connected = true;
                    _this.emit('server-connected');
                    sendconnectionopions();
                };

                var onerror = function (error) {
                    deleteconn();
                };

                var onclose = function () {
                    deleteconn();
                };

                var onmessage = function (message) {
                    update(_this, message);
                };

                if (nodejs) {
                    if (_this.socket && typeof _this.socket.removeAllListeners === 'function') {
                        _this.socket.removeAllListeners();
                    }
                    _this.socket = new WebSocketClient();
                    _this.socket.on('connectFailed', function(error) {
                        //console.log('Connect Error '  + error.toString());
                        deleteconn();
                    });

                    _this.socket.on('connect', function(connection) {
                        _this.connection = connection;
                        connection.on('error', onerror);
                        connection.on('close', onclose);
                        connection.on('message', onmessage);
                        onopen();
                    });

                    var cookie = jar.getCookieString(_this.host);
                    if (!cookie) {
                        _this.session();
                    } else {
                        _this.socket.connect(protocol + host + '/0/session/' + parameter, 'thsq-user', null,
                                             { Cookie: cookie });
                    }
                } else if (browser) {
                    _this.connection = new WebSocket(protocol + host + port + '/0/session/' + parameter, 'thsq-user');

                    _this.connection.onopen = onopen;
                    _this.connection.onerror = onerror;
                    _this.connection.onclose = onclose;
                    _this.connection.onmessage = onmessage;
                }
            } catch (e) {
                console.log('doconnect error', e);
                deleteconn();
            }
        }

        this.disconnect = deleteconn;
        this.reconnect = doconnect;
        this.session(function (s) {
            if (s === 'user-ok') {
                if (typeof callback === 'function') {
                    var devices, id, deviceid;
                    devices = {};
                    for (id in _this.devicecache) {
                        deviceid = deviceunique(_this.devicecache[id].device);
                        devices[deviceid] = _this.devicecache[id].device;
                    }
                    callback(devices);
                }
                doconnect();
            } else {
                if (typeof callback === 'function') {
                    callback(undefined);
                }
                doconnect();
            }
            _this.inited = true;
            callinitcallbacks(_this);
        });

        this.scaninterval = setInterval(function () {
            _this.scanBLE(10000);
        }, 10500);

        this.reconnecttimer = setInterval(function () {
            doconnect();
        }, 10000);

        this.pingtimer = setInterval(function () {
            doping();
        }, 60000);

        this.periodic = setInterval(function () {
            for (var unique in _this.nearbydevices) {
                if (_this.nearbydevices.hasOwnProperty(unique)) {
                    if (_this.nearbydevices[unique].time.getTime() < new Date().getTime() - 20000) {
                        var device = getDeviceFromCache(_this, unique);
                        if (deviceunique(device)) {
                            _this.emit('device-nearby-gone', device, unique);
                        }
                        delete _this.nearbydevices[unique];
                    }
                }
            }
        }, 1000);
    };

    Thsq.prototype.destroy = function () {
        this.removeAllListeners();
        this.exit();
    };

    function exit(thsq) {
        thsq.emit('exit');
        for (var unique in thsq.nearbydevices) {
            if (thsq.nearbydevices.hasOwnProperty(unique)) {
                var device = getDeviceFromCache(thsq, unique);
                if (deviceunique(device)) {
                    thsq.emit('device-nearby-gone', device, unique);
                }
                delete thsq.nearbydevices[unique];
            }
        }
        thsq.options = {};
        thsq.fetchqueues = {};
        thsq.fetching = {};
        thsq.fetchingnow = {};
        thsq.fetchingtimeout = {};
        thsq.usercache = {};
        thsq.devicecache = {};
        thsq.devicesfetching = {};
        thsq.claimeduniqueids = {};
        thsq.deviceuniqueids = {};
        thsq.nearbydevices = {};
        thsq.nearbyerrordevices = {};
        thsq.nearbydevicesrssi = {};
        clearInterval(thsq.pingtimer);
        clearInterval(thsq.reconnecttimer);
        clearInterval(thsq.scaninterval);
        clearInterval(thsq.periodic);
        var queue;
        for (queue in thsq.fetchingtimeout) {
            if (thsq.fetchingtimeout[queue]) {
                clearTimeout(thsq.fetchingtimeout[queue]);
            }
        }
        if (thsq.sendudpinterval) {
            clearInterval(thsq.sendudpinterval);
        }
        if (typeof thsq.disconnect === 'function') {
            thsq.disconnect();
        }
        thsq.exited = true;
        thsq.inited = false;
    }

    var exittimeout;

    Thsq.prototype.exit = function (callback) {
        var _this = this;

        if (_this.exited) {
            return;
        }

        /* Call any init callbacks that may be needed to be called before we exit */
        callinitcallbacks(_this);

        _this.exiting = true;

        clearTimeout(exittimeout);

        /* If there are no outstanding requests, then exit immediately. Otherwise, wait until there are no outstanding requests, then exit */

        var fetching = false;
        for (var q in _this.fetching) {
            fetching = fetching || _this.fetching[q];
        }

        if (!fetching) {
            exit(_this);
            _this.exiting = false;
            if (typeof callback === 'function') {
                callback();
            }
        } else {
            exittimeout = setTimeout(function () {
                _this.exit(callback);
            }, 1000);
        }
    };

    checkLoaded = function () {
        return true;
    };

    fcmMessage = function (token, thsqid) {
        setTimeout(function () {
            thsq.fcmToken = token;

            /*console.log("fcmMessage: " + thsqid);*/
            if (typeof thsq.fcmCallback === 'function') {
                thsq.fcmCallback(token, thsqid);
            }
        }, 0);
    };

    fcmToken = function (token) {
        setTimeout(function () {
            thsq.fcmToken = token;

            /*console.log("token: " + token);*/
            if (typeof thsq.fcmCallback === 'function') {
                thsq.fcmCallback(token, null);
            }
        }, 0);
    };

    hostMessage = function (str) {
        setTimeout(function () {
            if (thsq && (str === 'background' || str === 'stopped')) {
                thsq.dontPing = true;
                thsq.disconnect();
            } else {
                thsq.dontPing = false;
                thsq.reconnect();
                thsq.sendPing();
            }
        }, 0);
    };

    udpCallback = function (str) {
        setTimeout(function () {
            var array, i, auth;

            auth = str.toLowerCase();

            if (auth.length === 32) {
                addNearbyDevice(thsq, auth);
            } else if (auth.length === 64) {
                // Assume this is a hex-encoded 16 byte auth code
                array = new Uint8Array(auth.length / 2);
                for (i = 0; i < auth.length; i += 2) {
                    array[i / 2] = parseInt(auth.charAt(i), 16) * 16 +
                    parseInt(auth.charAt(i + 1), 16);
                }
                addNearbyDevice(thsq, String.fromCharCode.apply(null, array).toLowerCase());
            }
        }, 0);
    };

    bleCallback = function (str, rssi) {
        function hextostring(hex) {
            var i, string, val;

            string = '';
            for (i = 0; i < hex.length; i += 2) {
                val = parseInt(hex.substring(i, i + 2), 16);
                if (val === 0) {
                    return string;
                }
                string += String.fromCharCode(val);
            }
            return string;
        }
        setTimeout(function () {
            var auth, data, id, platform, state;

            if (str.indexOf('020106050954485351') === 0 &&
                (str.indexOf('FFFFFF') === 20 || str.indexOf('FF9103') === 20)) {
                data = str.substring(26);
            } else if (str.indexOf('ffff') === 0 || str.indexOf('9103') === 0) {
                data = str.substring(4);
            }
            if (data) {
                if (data.length === 32) {
                    auth = data.substring(0, 32).toLowerCase();
                    addNearbyDevice(thsq, auth, state, platform, rssi);
                } else {
                    if (data.indexOf('1') === 0) {
                        auth = data.substring(2, 2 + 32).toLowerCase();
                        state = parseInt(data.substring(1, 2), 16);
                        addNearbyDevice(thsq, auth, state, platform, rssi);
                    } else if (data.indexOf('0') === 0) {
                        state = parseInt(data.substring(1, 2), 16);
                        id = data.substring(2, 2 + 4).toLowerCase();
                        platform = hextostring(data.substring(6).toLowerCase());
                        addNearbyDevice(thsq, id, state, platform, rssi);
                    } else if (data.indexOf('2') === 0) {
                        state = parseInt(data.substring(1, 2), 16);
                        id = data.substring(2, 2 + 4).toLowerCase();
                        addNearbyDevice(thsq, id, state, undefined, undefined, data.substring(6, 6 + 16));
                    }
                }
            }
        }, 0);
    };

    var blewasenabled = true;
    bleEnabled = function (ble, location) {
        setTimeout(function () {
            var locationok = false;
            var bleok = false;

            if (ble === 'poweredOn') {
                bleok = true;
            } else if (String(ble) === String(true)) {
                bleok = true;
            }

            if (String(location) === String(true)) {
                locationok = true;
            }

            if (bleok === true && locationok === true) {
                if (blewasenabled === false) {
                    blewasenabled = true;
                    thsq.emit('ble-enabled');
                }
            } else {
                if (blewasenabled === true) {
                    blewasenabled = false;
                    thsq.emit('ble-disabled', bleok, locationok);
                }
            }
        }, 0);
    };

    thsq = new Thsq();
})();

if (typeof exports !== 'undefined') {
    module.exports = thsq;

    if (typeof global.it === 'function') {
        // Only used during automated testing
        module.exports.bleCallback = bleCallback;
    }
}
